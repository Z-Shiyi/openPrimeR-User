<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml">

<head>

<meta charset="utf-8">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="generator" content="pandoc" />



<meta name="progressive" content="true" />
<meta name="allow-skip" content="true" />

<title>openPrimeR Tutorial</title>


<!-- highlightjs -->
<style type="text/css">code{white-space: pre;}</style>
<style type="text/css">
  pre:not([class]) {
    background-color: white;
  }
</style>
<script type="text/javascript">
if (window.hljs && document.readyState && document.readyState === "complete") {
   window.setTimeout(function() {
      hljs.initHighlighting();
   }, 0);
}
</script>



</head>

<body>



<div class="pageContent band">
<div class="bandContent page">

<div class="topics">

<div id="section-preliminaries" class="section level2">
<h2>Preliminaries</h2>
<p>This tutorial will introduce you to the core functionalities of the openPrimeR package:</p>
<ul>
<li>Loading primers and templates</li>
<li>Analyzing existing sets of primers</li>
<li>Designing novel primer sets</li>
</ul>
<p>If you’re already accustomed with these functions, you can skip this tutorial. Otherwise, let’s start with attaching the openPrimeR package:</p>
<pre class="r"><code>library(openPrimeR)</code></pre>
</div>
<div id="section-loading-templates" class="section level2">
<h2>Loading templates</h2>
<p>Let’s try to load the sequences from the following FASTA file containing germline cDNA from human immunoglobulin heavy chains :</p>
<pre class="r"><code>fasta.file &lt;- system.file(&quot;extdata&quot;, &quot;IMGT_data&quot;, &quot;templates&quot;, 
        &quot;Homo_sapiens_IGH_functional_exon.fasta&quot;, package = &quot;openPrimeR&quot;)</code></pre>
<p>Please use an editor to get acquainted with the format of the file and then take a look at the template sequences using <code>read_templates()</code>.</p>
<div class="tutorial-exercise" data-label="load_templates_FASTA_1" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>fasta.file &lt;- system.file(&quot;extdata&quot;, &quot;IMGT_data&quot;, &quot;templates&quot;, 
        &quot;Homo_sapiens_IGH_functional_exon.fasta&quot;, package = &quot;openPrimeR&quot;)
# Load the template sequences from &#39;fasta.file&#39; and view the results</code></pre>
<script type="application/json" data-opts-chunk="1">{"fig.width":6.5,"fig.height":4,"fig.retina":2,"fig.align":"default","fig.keep":"high","fig.show":"asis","out.width":624,"warning":true,"error":false,"message":true,"exercise.df_print":"paged","exercise.timelimit":500,"exercise.checker":"NULL"}</script>
</div>
<div class="tutorial-exercise-support" data-label="load_templates_FASTA_1-solution" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>fasta.file &lt;- system.file(&quot;extdata&quot;, &quot;IMGT_data&quot;, &quot;templates&quot;, 
        &quot;Homo_sapiens_IGH_functional_exon.fasta&quot;, package = &quot;openPrimeR&quot;)
# Load the template sequences from &#39;fasta.file&#39;
template.df &lt;- read_templates(fasta.file)
asS3(template.df)</code></pre>
</div>
<p>As you can see, the templates were successfully loaded; Please explore the loaded templates. You can change columns by using the top right and left arrows. Comparing the loaded templates with the original FASTA file, we can see that the metadata contained in the headers of the FASTA file were not annotated by <code>read_templates()</code>.</p>
<div id="section-annotating-templates-with-fasta-metadata" class="section level3">
<h3>Annotating templates with FASTA metadata</h3>
<p>To store the metadata correctly, you can use the <code>hdr.structure</code> and <code>delim</code> arguments of <code>read_templates()</code>, where <code>hdr.structure</code> provides a character vector of identifiers for information contained in the header and <code>delim</code> is a single character that is used in the header of the FASTA file to delimit individual metadata. When supplying the keyword ‘GROUP’ in the <code>hdr.structure</code> vector, template groups are annotated with their groups, which is relevant for visualizing properties of the templates later. Now, it’s your turn: Try to load the the template sequences with their annotated IGHV groups:</p>
<div class="tutorial-exercise" data-label="load_templates_FASTA_2" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>fasta.file &lt;- system.file(&quot;extdata&quot;, &quot;IMGT_data&quot;, &quot;templates&quot;, 
        &quot;Homo_sapiens_IGH_functional_exon.fasta&quot;, package = &quot;openPrimeR&quot;)
hdr.structure &lt;- NULL # adjust according to the FASTA header
delim &lt;- NULL # adjust according to the FASTA header
template.df &lt;- read_templates(fasta.file, hdr.structure = hdr.structure, 
                               delim = delim)</code></pre>
<script type="application/json" data-opts-chunk="1">{"fig.width":6.5,"fig.height":4,"fig.retina":2,"fig.align":"default","fig.keep":"high","fig.show":"asis","out.width":624,"warning":true,"error":false,"message":true,"exercise.df_print":"paged","exercise.timelimit":500,"exercise.checker":"NULL"}</script>
</div>
<div class="tutorial-exercise-support" data-label="load_templates_FASTA_2-solution" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>hdr.structure &lt;- c(&quot;ACCESSION&quot;, &quot;GROUP&quot;, &quot;SPECIES&quot;, &quot;FUNCTION&quot;)
delim &lt;- &quot;|&quot;
template.df &lt;- read_templates(fasta.file, hdr.structure = hdr.structure, 
                                delim = &quot;|&quot;)</code></pre>
</div>
<p>Note that, if not specified otherwise via the <code>id.column</code> argument, the first entry of <code>hdr.structure</code> is used as the template identifier. We can verify that the template groups are available now via:</p>
<div class="tutorial-exercise-support" data-label="load_templates_FASTA_3-setup" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>fasta.file &lt;- system.file(&quot;extdata&quot;, &quot;IMGT_data&quot;, &quot;templates&quot;, 
        &quot;Homo_sapiens_IGH_functional_exon.fasta&quot;, package = &quot;openPrimeR&quot;)
hdr.structure &lt;- c(&quot;ACCESSION&quot;, &quot;GROUP&quot;, &quot;SPECIES&quot;, &quot;FUNCTION&quot;)
delim &lt;- &quot;|&quot;
template.df &lt;- read_templates(fasta.file, hdr.structure = hdr.structure, 
                                delim = &quot;|&quot;)</code></pre>
</div>
<div class="tutorial-exercise" data-label="load_templates_FASTA_3" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>print(template.df$Group)</code></pre>
<script type="application/json" data-opts-chunk="1">{"fig.width":6.5,"fig.height":4,"fig.retina":2,"fig.align":"default","fig.keep":"high","fig.show":"asis","out.width":624,"warning":true,"error":false,"message":true,"exercise.df_print":"paged","exercise.timelimit":500,"exercise.checker":"NULL"}</script>
</div>
</div>
<div id="section-defining-the-primer-binding-regions" class="section level3">
<h3>Defining the primer binding regions</h3>
<p>Next, we will move on to defining the binding region of the primers in the templates. Since we deal with immunological templates, we want to annotate the leader region for each sequence individually. For this purpose, we will use a FASTA file containing the leader sequences corresponding to the templates:</p>
<div class="tutorial-exercise" data-label="leader_file" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>leader.fasta &lt;- system.file(&quot;extdata&quot;, &quot;IMGT_data&quot;, &quot;templates&quot;, 
        &quot;Homo_sapiens_IGH_functional_leader.fasta&quot;, package = &quot;openPrimeR&quot;)
print(leader.fasta)</code></pre>
<script type="application/json" data-opts-chunk="1">{"fig.width":6.5,"fig.height":4,"fig.retina":2,"fig.align":"default","fig.keep":"high","fig.show":"asis","out.width":624,"warning":true,"error":false,"message":true,"exercise.df_print":"paged","exercise.timelimit":500,"exercise.checker":"NULL"}</script>
</div>
<p>Again, you may want to take a look at the structure of the file before continung. The entries in the file containing the individual binding regions should match those in the template FASTA file and the provided regions should be subsequences of the loaded sequences.</p>
<p>We can define the binding region in the templates using <code>assign_binding_regions()</code>; since we only care about binding of the forward primers, we will only adjust the forward binding region.</p>
<div class="tutorial-exercise" data-label="assign_leader" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>leader.fasta &lt;- system.file(&quot;extdata&quot;, &quot;IMGT_data&quot;, &quot;templates&quot;, 
        &quot;Homo_sapiens_IGH_functional_leader.fasta&quot;, package = &quot;openPrimeR&quot;)
# Assign the forward binding regions from &#39;leader.fasta&#39; to &#39;template.df&#39;:</code></pre>
<script type="application/json" data-opts-chunk="1">{"fig.width":6.5,"fig.height":4,"fig.retina":2,"fig.align":"default","fig.keep":"high","fig.show":"asis","out.width":624,"warning":true,"error":false,"message":true,"exercise.df_print":"paged","exercise.timelimit":500,"exercise.checker":"NULL"}</script>
</div>
<div class="tutorial-exercise-support" data-label="assign_leader-solution" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>leader.fasta &lt;- system.file(&quot;extdata&quot;, &quot;IMGT_data&quot;, &quot;templates&quot;, 
        &quot;Homo_sapiens_IGH_functional_leader.fasta&quot;, package = &quot;openPrimeR&quot;)
template.df &lt;- assign_binding_regions(template.df, fw = leader.fasta, rev = NULL)</code></pre>
</div>
<p>We can verify that the binding regions for forward primers were annotated successfully in the following way:</p>
<div class="tutorial-exercise-support" data-label="leader_template_setup" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>fasta.file &lt;- system.file(&quot;extdata&quot;, &quot;IMGT_data&quot;, &quot;templates&quot;, 
        &quot;Homo_sapiens_IGH_functional_exon.fasta&quot;, package = &quot;openPrimeR&quot;)
hdr.structure &lt;- c(&quot;ACCESSION&quot;, &quot;GROUP&quot;, &quot;SPECIES&quot;, &quot;FUNCTION&quot;)
delim &lt;- &quot;|&quot;
template.df &lt;- read_templates(fasta.file, hdr.structure = hdr.structure, 
                                delim = &quot;|&quot;)
leader.fasta &lt;- system.file(&quot;extdata&quot;, &quot;IMGT_data&quot;, &quot;templates&quot;, 
        &quot;Homo_sapiens_IGH_functional_leader.fasta&quot;, package = &quot;openPrimeR&quot;)
template.df &lt;- assign_binding_regions(template.df, fw = leader.fasta, rev = NULL)</code></pre>
</div>
<pre class="r"><code>utils::head(template.df$Allowed_fw)</code></pre>
<pre><code>## [1] &quot;atggactggacctggagcatccttttcttggtggcagcaccaacaggtgcccactcc&quot;
## [2] &quot;atggactggacctggagcatccttttcttggtggcagcagcaacaggtgcccactcc&quot;
## [3] &quot;atggactggacctggagcatccttttcttggtggcagcagcaacaggtgcccactcc&quot;
## [4] &quot;atggactggacctggaggatcctcttcttggtggcagcagccacaggagcccactcc&quot;
## [5] &quot;atggactggacctggaggatcctcttcttggtggcagcagccacaggagcccactcc&quot;
## [6] &quot;atggactggacctggaggatcctcttcttggtggcagcagccacaggagcccactcc&quot;</code></pre>
<pre class="r"><code>cbind(utils::head(template.df$Allowed_Start_fw), utils::head(template.df$Allowed_End_fw))</code></pre>
<pre><code>##      [,1] [,2]
## [1,]    1   57
## [2,]    1   57
## [3,]    1   57
## [4,]    1   57
## [5,]    1   57
## [6,]    1   57</code></pre>
<p>where <code>Allowed_fw</code> contains the sequence of the leader region (the region before the exon) and <code>Allowed_Start_fw</code> and <code>Allowed_End_fw</code> provide the interval of allowed binding positions in the templates for forward primers.</p>
</div>
<div id="section-adjusting-the-template-specific-binding-regions" class="section level3">
<h3>Adjusting the template-specific binding regions</h3>
<p>As a final step, we need to modify the binding region for forward primer such that the binding region includes the first position of the exon, which lies outside the leader. Hence, we will extend the current binding region by one position. For this purpose, <code>adjust_binding_regions</code> can be used. This function requires a modified binding range, relative to the previously annotated binding region. The relative positions are defined such that position 0 is the first position after the end of the annotated binding region. For example, the interval [0, 30] would mean that we change the region in which binding is allowed to the first 30 positions of the exon. Please extend the binding regions annotation of <code>template.df</code> by one position via <code>adjust_binding_regions()</code>:</p>
<div class="tutorial-exercise" data-label="final_regions" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code># Extend the binding regions of &#39;template.df&#39; by one position:</code></pre>
<script type="application/json" data-opts-chunk="1">{"fig.width":6.5,"fig.height":4,"fig.retina":2,"fig.align":"default","fig.keep":"high","fig.show":"asis","out.width":624,"warning":true,"error":false,"message":true,"exercise.df_print":"paged","exercise.timelimit":500,"exercise.setup":"leader_template_setup","exercise.checker":"NULL"}</script>
</div>
<div class="tutorial-exercise-support" data-label="final_regions-solution" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>template.df &lt;- adjust_binding_regions(template.df, 
        c(-max(template.df$Allowed_End_fw), 0), NULL)
# Verify the new annotation:
head(cbind(template.df$Allowed_Start_fw, template.df$Allowed_End_fw))</code></pre>
</div>
<p>Note that we have chosen the maximum relative position for the start of the binding region to not affect any change, while we have extended the end of the binding region to the 0-th position, where 0 indicates the start of the exon.</p>
</div>
</div>
<div id="section-loading-primers" class="section level2">
<h2>Loading primers</h2>
<p>Similarly to templates, we can also load primers from a FASTA file. For this purpose, we’ll use <code>read_primers()</code>. Consider you want to load the primers in the following file:</p>
<pre class="r"><code>fasta.file &lt;- system.file(&quot;extdata&quot;, &quot;IMGT_data&quot;, &quot;templates&quot;, 
        &quot;Homo_sapiens_IGH_functional_exon.fasta&quot;, package = &quot;openPrimeR&quot;)</code></pre>
<p>Why don’t you try loading the primers and storing the resulting object in the <code>primer.df</code> variable?</p>
<pre class="r"><code>fasta.file &lt;- system.file(&quot;extdata&quot;, &quot;IMGT_data&quot;, &quot;primers&quot;, 
        &quot;IGHV&quot;, &quot;Tiller2008_1st.fasta&quot;, package = &quot;openPrimeR&quot;)</code></pre>
<div class="tutorial-exercise" data-label="primer_FASTA_1" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>fasta.file &lt;- system.file(&quot;extdata&quot;, &quot;IMGT_data&quot;, &quot;primers&quot;, 
        &quot;IGHV&quot;, &quot;Tiller2008_1st.fasta&quot;, package = &quot;openPrimeR&quot;)</code></pre>
<script type="application/json" data-opts-chunk="1">{"fig.width":6.5,"fig.height":4,"fig.retina":2,"fig.align":"default","fig.keep":"high","fig.show":"asis","out.width":624,"warning":true,"error":false,"message":true,"exercise.df_print":"paged","exercise.timelimit":500,"exercise.checker":"NULL"}</script>
</div>
<div class="tutorial-exercise-support" data-label="primer_FASTA_1-solution" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>fasta.file &lt;- system.file(&quot;extdata&quot;, &quot;IMGT_data&quot;, &quot;primers&quot;, 
        &quot;IGHV&quot;, &quot;Tiller2008_1st.fasta&quot;, package = &quot;openPrimeR&quot;)
primer.df &lt;- read_primers(fasta.file)</code></pre>
</div>
<p>Having loaded the primers successfully, let’s explore the data:</p>
<div class="tutorial-exercise-support" data-label="primer_FASTA_setup2" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>fasta.file &lt;- system.file(&quot;extdata&quot;, &quot;IMGT_data&quot;, &quot;primers&quot;, 
        &quot;IGHV&quot;, &quot;Tiller2008_1st.fasta&quot;, package = &quot;openPrimeR&quot;)
primer.df &lt;- read_primers(fasta.file)</code></pre>
</div>
<div class="tutorial-exercise" data-label="primer_FASTA_2" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code># Explore the primer data frame</code></pre>
<script type="application/json" data-opts-chunk="1">{"fig.width":6.5,"fig.height":4,"fig.retina":2,"fig.align":"default","fig.keep":"high","fig.show":"asis","out.width":624,"warning":true,"error":false,"message":true,"exercise.df_print":"paged","exercise.timelimit":500,"exercise.setup":"primer_FASTA_setup2","exercise.checker":"NULL"}</script>
</div>
<div class="tutorial-exercise-support" data-label="primer_FASTA_2-solution" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>print(primer.df)</code></pre>
</div>
<p>As we can see, the data frame only contains entries in the <code>Forward</code>, but not the <code>Reverse</code> column indicating that this is a set of forward primers only. Moreover, we obtain some basic information about the primers such as their length via <code>primer_length_fw</code> and their degeneracy via <code>Degeneracy_fw</code>. As a careful reader, you may now wonder how it was possible to annotate the primers with their directionalities without specifying any identifiers.</p>
<p>This was possible because the input FASTA file already provided the default keywords used by <code>read_primers</code> for identifying the directions of the primers, which you verify by finding that the tag <code>_fw</code> is shared by all entries in the <code>ID</code> column. For your own primers, it is crucial that you tag the directionality of the primers in the FASTA file correctly and then specify the respective keywords using the <code>fw.id</code> and <code>rev.id</code> arguments in case that you are deviation from the defaults.</p>
</div>
<div id="section-defining-settings" class="section level2">
<h2>Defining settings</h2>
<p>There’s a lot of experience with performing PCRs and therefore we know which physicochemical properties of primers are favorable for amplification and which are not. In openPrimeR, the desired ranges of values of these properties are called <code>constraints</code> and they are stored in a <code>DesignSettings</code> object.</p>
<p>Let’s define some constraints by loading one of the XML settings files that are shipped with the package by storing the result of <code>read_settings()</code> in the <code>settings</code> variable:</p>
<div class="tutorial-exercise" data-label="read_settings" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>xml.file &lt;- system.file(&quot;extdata&quot;, &quot;settings&quot;, &quot;B_Taq_PCR_evaluate.xml&quot;,
              package = &quot;openPrimeR&quot;)</code></pre>
<script type="application/json" data-opts-chunk="1">{"fig.width":6.5,"fig.height":4,"fig.retina":2,"fig.align":"default","fig.keep":"high","fig.show":"asis","out.width":624,"warning":true,"error":false,"message":true,"exercise.df_print":"paged","exercise.timelimit":500,"exercise.checker":"NULL"}</script>
</div>
<div class="tutorial-exercise-support" data-label="read_settings-solution" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>xml.file &lt;- system.file(&quot;extdata&quot;, &quot;settings&quot;, &quot;B_Taq_PCR_evaluate.xml&quot;,
              package = &quot;openPrimeR&quot;)
settings &lt;- read_settings(xml.file)</code></pre>
</div>
<div class="tutorial-exercise-support" data-label="settings_setup" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>xml.file &lt;- system.file(&quot;extdata&quot;, &quot;settings&quot;, &quot;B_Taq_PCR_evaluate.xml&quot;,
              package = &quot;openPrimeR&quot;)
settings &lt;- read_settings(xml.file)</code></pre>
</div>
<p>Let’s take a look at the structure of <code>settings</code>:</p>
<div class="tutorial-exercise" data-label="settings_structure" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>print(settings)</code></pre>
<script type="application/json" data-opts-chunk="1">{"fig.width":6.5,"fig.height":4,"fig.retina":2,"fig.align":"default","fig.keep":"high","fig.show":"asis","out.width":624,"warning":true,"error":false,"message":true,"exercise.df_print":"paged","exercise.timelimit":500,"exercise.setup":"settings_setup","exercise.checker":"NULL"}</script>
</div>
<p>As you can see, the <code>DesignSettings</code> object contains far more information than mjust the constraint settings, but let’s focus on the constraints first. You can change the physicochemical properties and their constraints by using the <code>constraints()</code> function. In the following example, we output a listing of all defined constraint settings</p>
<div class="tutorial-exercise" data-label="settings_constraints" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>constraints(settings)</code></pre>
<script type="application/json" data-opts-chunk="1">{"fig.width":6.5,"fig.height":4,"fig.retina":2,"fig.align":"default","fig.keep":"high","fig.show":"asis","out.width":624,"warning":true,"error":false,"message":true,"exercise.df_print":"paged","exercise.timelimit":500,"exercise.setup":"settings_setup","exercise.checker":"NULL"}</script>
</div>
<p>where <code>min</code> always indicates the minimal allowed value and <code>max</code> indicates the maximal allowed value. If either is missing, this indicates that the corresponding values are unlimited. For example, the extent of the GC clamp should be between 1 and 3, while the coverage of every primer should be at least 1.</p>
<p>You can customize the constraint settings by using <code>constraints()</code> as a setter. Why don’t you try to exclude the GC clamp property from consideration and increase the required number of coverage events per primer to 5? Note that you always have to provide named (<code>min</code> and/or <code>max</code>) numeric vectors when modifying constraints.</p>
<div class="tutorial-exercise" data-label="modify_constraints" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>constraints(settings)</code></pre>
<script type="application/json" data-opts-chunk="1">{"fig.width":6.5,"fig.height":4,"fig.retina":2,"fig.align":"default","fig.keep":"high","fig.show":"asis","out.width":624,"warning":true,"error":false,"message":true,"exercise.df_print":"paged","exercise.timelimit":500,"exercise.checker":"NULL"}</script>
</div>
<div class="tutorial-exercise-support" data-label="modify_constraints-solution" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code># not loading setup for settings here due to issues, still works?! TODO
constraints(settings) &lt;- constraints(settings)[names(constraints(settings)) != &quot;gc_clamp&quot;]
constraints(settings)$primer_coverage &lt;- c(&quot;min&quot; = 5)
constraints(settings)</code></pre>
</div>
<div class="tutorial-exercise-support" data-label="settings_config" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>xml.file &lt;- system.file(&quot;extdata&quot;, &quot;settings&quot;, &quot;B_Taq_PCR_evaluate.xml&quot;,
              package = &quot;openPrimeR&quot;)
settings &lt;- read_settings(xml.file)
constraints(settings) &lt;- constraints(settings)[names(constraints(settings)) != &quot;gc_clamp&quot;]
constraints(settings)$primer_coverage &lt;- c(&quot;min&quot; = 5)</code></pre>
</div>
<p>The next thing we may want to adjust is the way in which the coverage is computed. For this, you can use <code>cvg_constraints()</code>:</p>
<div class="tutorial-exercise" data-label="cvg_constraints" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>cvg_constraints(settings)</code></pre>
<script type="application/json" data-opts-chunk="1">{"fig.width":6.5,"fig.height":4,"fig.retina":2,"fig.align":"default","fig.keep":"high","fig.show":"asis","out.width":624,"warning":true,"error":false,"message":true,"exercise.df_print":"paged","exercise.timelimit":500,"exercise.setup":"settings_config","exercise.checker":"NULL"}</script>
</div>
<p>We see that the maximal false positive rate for calling coverage events is set to 5%. <code>stop_codon</code> and <code>substitution</code> are both codon design constraints, where 1 denominates coverage events inducing stop codons or substitutions and 0 indicates the absence of such events. Since the maxima of both constraints are set to 1, we do not filter according to these events at the moment. To learn about other possible coverage constraints, we refer to the openPrimeR manual.</p>
<p>Having verified the constraints for computing the coverage, let us now review the constraint options via <code>conOptions()</code>:</p>
<div class="tutorial-exercise" data-label="con_options" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>conOptions(settings)</code></pre>
<script type="application/json" data-opts-chunk="1">{"fig.width":6.5,"fig.height":4,"fig.retina":2,"fig.align":"default","fig.keep":"high","fig.show":"asis","out.width":624,"warning":true,"error":false,"message":true,"exercise.df_print":"paged","exercise.timelimit":500,"exercise.setup":"settings_config","exercise.checker":"NULL"}</script>
</div>
<p><code>allowed_mismatches</code> provides the maximal number of mismatches between primers and templates, <code>allowed_other_binding_ratio</code> sets the maximal ratio of off-target binding events, and <code>allowed_region_definition</code> determines whether primers should bind exactly within the specified binding region or only an overlap is required. For our evaluations, please specify the following settings now:</p>
<ul>
<li>Set <code>allowed_mismatches</code> to 0 to ensure that only fully complementary primers are considered to cover the templates</li>
<li>Set <code>allowed_other_binding_ratio</code> to 0 to ensure that only primers binding to the target region are considered to cover the templates</li>
<li>Set <code>allowed_region_definition</code> to <code>any</code> to consider the coverage of primers that only overlap with the target region</li>
</ul>
<div class="tutorial-exercise" data-label="con_options_mod" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>conOptions(settings)</code></pre>
<script type="application/json" data-opts-chunk="1">{"fig.width":6.5,"fig.height":4,"fig.retina":2,"fig.align":"default","fig.keep":"high","fig.show":"asis","out.width":624,"warning":true,"error":false,"message":true,"exercise.df_print":"paged","exercise.timelimit":500,"exercise.setup":"settings_config","exercise.checker":"NULL"}</script>
</div>
<div class="tutorial-exercise-support" data-label="con_options_mod-solution" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>conOptions(settings)$allowed_mismatches &lt;- 0
conOptions(settings)$allowed_other_binding_ratio &lt;- 0
conOptions(settings)$allowed_region_definition &lt;- &quot;any&quot;
conOptions(settings)</code></pre>
</div>
<div class="tutorial-exercise-support" data-label="settings_config2" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>xml.file &lt;- system.file(&quot;extdata&quot;, &quot;settings&quot;, &quot;B_Taq_PCR_evaluate.xml&quot;,
              package = &quot;openPrimeR&quot;)
settings &lt;- read_settings(xml.file)
constraints(settings) &lt;- constraints(settings)[names(constraints(settings)) != &quot;gc_clamp&quot;]
constraints(settings)$primer_coverage &lt;- c(&quot;min&quot; = 5)
conOptions(settings)$allowed_mismatches &lt;- 0
conOptions(settings)$allowed_other_binding_ratio &lt;- 0
conOptions(settings)$allowed_region_definition &lt;- &quot;any&quot;</code></pre>
</div>
<p>Last, we should take a look at the current PCR conditions using <code>PCR()</code>:</p>
<div class="tutorial-exercise" data-label="settings_PCR" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>PCR(settings)</code></pre>
<script type="application/json" data-opts-chunk="1">{"fig.width":6.5,"fig.height":4,"fig.retina":2,"fig.align":"default","fig.keep":"high","fig.show":"asis","out.width":624,"warning":true,"error":false,"message":true,"exercise.df_print":"paged","exercise.timelimit":500,"exercise.setup":"settings_config2","exercise.checker":"NULL"}</script>
</div>
<p>When performing an analysis, please ensure that all ion concentrations (molar) and other PCR conditions (e.g. the annealing temperature) reflect your experimental setup correctly. Since the adjustment of the PCR settings can be performed similarly to the other settings, we will retain the default settings for now and start with our first analysis.</p>
</div>
<div id="section-primer-coverage" class="section level2">
<h2>Primer coverage</h2>
<div class="tutorial-exercise-support" data-label="cvg_setup1" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>xml.file &lt;- system.file(&quot;extdata&quot;, &quot;settings&quot;, &quot;B_Taq_PCR_evaluate.xml&quot;,
              package = &quot;openPrimeR&quot;)
settings &lt;- read_settings(xml.file)
constraints(settings) &lt;- constraints(settings)[names(constraints(settings)) != &quot;gc_clamp&quot;]
constraints(settings)$primer_coverage &lt;- c(&quot;min&quot; = 5)
conOptions(settings)$allowed_mismatches &lt;- 0
conOptions(settings)$allowed_other_binding_ratio &lt;- 0
conOptions(settings)$allowed_region_definition &lt;- &quot;any&quot;

fasta.file &lt;- system.file(&quot;extdata&quot;, &quot;IMGT_data&quot;, &quot;templates&quot;, 
        &quot;Homo_sapiens_IGH_functional_exon.fasta&quot;, package = &quot;openPrimeR&quot;)
hdr.structure &lt;- c(&quot;ACCESSION&quot;, &quot;GROUP&quot;, &quot;SPECIES&quot;, &quot;FUNCTION&quot;)
delim &lt;- &quot;|&quot;
template.df &lt;- read_templates(fasta.file, hdr.structure = hdr.structure, 
                                delim = &quot;|&quot;)
leader.fasta &lt;- system.file(&quot;extdata&quot;, &quot;IMGT_data&quot;, &quot;templates&quot;, 
        &quot;Homo_sapiens_IGH_functional_leader.fasta&quot;, package = &quot;openPrimeR&quot;)
template.df &lt;- assign_binding_regions(template.df, fw = leader.fasta, rev = NULL)
template.df &lt;- adjust_binding_regions(template.df, 
        c(-max(template.df$Allowed_End_fw), 0), NULL)

fasta.file &lt;- system.file(&quot;extdata&quot;, &quot;IMGT_data&quot;, &quot;primers&quot;, 
        &quot;IGHV&quot;, &quot;Tiller2008_1st.fasta&quot;, package = &quot;openPrimeR&quot;)
primer.df &lt;- read_primers(fasta.file)</code></pre>
</div>
<p>To learn more about the properties of the primers, we can use <code>check_constraints()</code>. As a first analysis, let’s compute the primer coverage:</p>
<div class="tutorial-exercise" data-label="check1" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>constraint.df &lt;- check_constraints(primer.df, template.df, settings, active.constraints = &quot;primer_coverage&quot;)</code></pre>
<script type="application/json" data-opts-chunk="1">{"fig.width":6.5,"fig.height":4,"fig.retina":2,"fig.align":"default","fig.keep":"high","fig.show":"asis","out.width":624,"warning":true,"error":false,"message":false,"exercise.df_print":"paged","exercise.timelimit":500,"exercise.setup":"cvg_setup1","exercise.checker":"NULL"}</script>
</div>
<div class="tutorial-exercise-support" data-label="cvg_setup2" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>xml.file &lt;- system.file(&quot;extdata&quot;, &quot;settings&quot;, &quot;B_Taq_PCR_evaluate.xml&quot;,
              package = &quot;openPrimeR&quot;)
settings &lt;- read_settings(xml.file)
constraints(settings) &lt;- constraints(settings)[names(constraints(settings)) != &quot;gc_clamp&quot;]
constraints(settings)$primer_coverage &lt;- c(&quot;min&quot; = 5)
conOptions(settings)$allowed_mismatches &lt;- 0
conOptions(settings)$allowed_other_binding_ratio &lt;- 0
conOptions(settings)$allowed_region_definition &lt;- &quot;any&quot;

fasta.file &lt;- system.file(&quot;extdata&quot;, &quot;IMGT_data&quot;, &quot;templates&quot;, 
        &quot;Homo_sapiens_IGH_functional_exon.fasta&quot;, package = &quot;openPrimeR&quot;)
hdr.structure &lt;- c(&quot;ACCESSION&quot;, &quot;GROUP&quot;, &quot;SPECIES&quot;, &quot;FUNCTION&quot;)
delim &lt;- &quot;|&quot;
template.df &lt;- read_templates(fasta.file, hdr.structure = hdr.structure, 
                                delim = &quot;|&quot;)
leader.fasta &lt;- system.file(&quot;extdata&quot;, &quot;IMGT_data&quot;, &quot;templates&quot;, 
        &quot;Homo_sapiens_IGH_functional_leader.fasta&quot;, package = &quot;openPrimeR&quot;)
template.df &lt;- assign_binding_regions(template.df, fw = leader.fasta, rev = NULL)
template.df &lt;- adjust_binding_regions(template.df, 
        c(-max(template.df$Allowed_End_fw), 0), NULL)

fasta.file &lt;- system.file(&quot;extdata&quot;, &quot;IMGT_data&quot;, &quot;primers&quot;, 
        &quot;IGHV&quot;, &quot;Tiller2008_1st.fasta&quot;, package = &quot;openPrimeR&quot;)
primer.df &lt;- read_primers(fasta.file)
constraint.df &lt;- check_constraints(primer.df, template.df, settings, active.constraints = &quot;primer_coverage&quot;)</code></pre>
</div>
<p>Please investigate the structure of <code>constraint.df</code> and then try to find the primer with the highest coverage as well as the template sequences that are covered by the primer:</p>
<div class="tutorial-exercise" data-label="highest_cvg" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>colnames(constraint.df)</code></pre>
<script type="application/json" data-opts-chunk="1">{"fig.width":6.5,"fig.height":4,"fig.retina":2,"fig.align":"default","fig.keep":"high","fig.show":"asis","out.width":624,"warning":true,"error":false,"message":true,"exercise.df_print":"paged","exercise.timelimit":500,"exercise.setup":"cvg_setup2","exercise.checker":"NULL"}</script>
</div>
<div class="tutorial-exercise-support" data-label="highest_cvg-solution" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>max.idx &lt;- which.max(constraint.df$primer_coverage)
max.ID &lt;- primer.df$ID[max.idx]
covered.templates &lt;- strsplit(constraint.df$Covered_Seqs[max.idx], split = &quot;&quot;)[[1]]</code></pre>
</div>
<p>Great! Let’s visualize which templates are covered by the primers using <code>plot_template_cvg()</code>.</p>
<div class="tutorial-exercise" data-label="template_cvg_plot" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>plot_template_cvg(constraint.df, template.df)</code></pre>
<script type="application/json" data-opts-chunk="1">{"fig.width":6.5,"fig.height":4,"fig.retina":2,"fig.align":"default","fig.keep":"high","fig.show":"asis","out.width":624,"warning":true,"error":false,"message":true,"exercise.df_print":"paged","exercise.timelimit":500,"exercise.setup":"cvg_setup2","exercise.checker":"NULL"}</script>
</div>
<p>In the plot, <code>Identity Coverage</code> indicates the coverage when requiring full complementarity, while <code>Expected Coverage</code> provides the coverage when applying the coverage constraints. Since we didn’t allow for any mismatches, both coverage values are nearly identical. <code>Available Templates</code> provides the number of template sequences per group. From the plot we can see that, when we don’t allow for any mismatches, about 47% of the templates are covered by the primers and that IGHV3, IGHV4, IGHV5, and IGHV7 are (partially) covered. To find out which primer amplifies which template groups, we can use <code>plot_primer_cvg</code>:</p>
<div class="tutorial-exercise" data-label="primer_cvg_plot" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code># Plot the primer coverage</code></pre>
<script type="application/json" data-opts-chunk="1">{"fig.width":6.5,"fig.height":4,"fig.retina":2,"fig.align":"default","fig.keep":"high","fig.show":"asis","out.width":624,"warning":true,"error":false,"message":true,"exercise.df_print":"paged","exercise.timelimit":500,"exercise.setup":"cvg_setup2","exercise.checker":"NULL"}</script>
</div>
<div class="tutorial-exercise-support" data-label="primer_cvg_plot-solution" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>plot_primer_cvg(constraint.df, template.df)</code></pre>
</div>
<p>This plot reveals that each primer binds with 100% complementarity only to individual groups of templates; note that the primer <code>VH_1|1</code> targets only IGHV7, which consists of a single template sequence. However, our analysis was extremely conservative, since we didn’t consider mismatch binding events at all. To more accurately estimate the coverage of the primers, we will now ramp up the number of considered mismatches per possible template-primer binding event to 7:</p>
<div class="tutorial-exercise" data-label="mod_settings_cvg" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>conOptions(settings)</code></pre>
<script type="application/json" data-opts-chunk="1">{"fig.width":6.5,"fig.height":4,"fig.retina":2,"fig.align":"default","fig.keep":"high","fig.show":"asis","out.width":624,"warning":true,"error":false,"message":true,"exercise.df_print":"paged","exercise.timelimit":500,"exercise.setup":"cvg_setup","exercise.checker":"NULL"}</script>
</div>
<div class="tutorial-exercise-support" data-label="mod_settings_cvg-solution" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>conOptions(settings)$allowed_mismatches &lt;- 7</code></pre>
</div>
<div class="tutorial-exercise-support" data-label="cvg_setup3" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>xml.file &lt;- system.file(&quot;extdata&quot;, &quot;settings&quot;, &quot;B_Taq_PCR_evaluate.xml&quot;,
              package = &quot;openPrimeR&quot;)
settings &lt;- read_settings(xml.file)
constraints(settings) &lt;- constraints(settings)[names(constraints(settings)) != &quot;gc_clamp&quot;]
constraints(settings)$primer_coverage &lt;- c(&quot;min&quot; = 5)
conOptions(settings)$allowed_mismatches &lt;- 7
conOptions(settings)$allowed_other_binding_ratio &lt;- 0
conOptions(settings)$allowed_region_definition &lt;- &quot;any&quot;

fasta.file &lt;- system.file(&quot;extdata&quot;, &quot;IMGT_data&quot;, &quot;templates&quot;, 
        &quot;Homo_sapiens_IGH_functional_exon.fasta&quot;, package = &quot;openPrimeR&quot;)
hdr.structure &lt;- c(&quot;ACCESSION&quot;, &quot;GROUP&quot;, &quot;SPECIES&quot;, &quot;FUNCTION&quot;)
delim &lt;- &quot;|&quot;
template.df &lt;- read_templates(fasta.file, hdr.structure = hdr.structure, 
                                delim = &quot;|&quot;)
leader.fasta &lt;- system.file(&quot;extdata&quot;, &quot;IMGT_data&quot;, &quot;templates&quot;, 
        &quot;Homo_sapiens_IGH_functional_leader.fasta&quot;, package = &quot;openPrimeR&quot;)
template.df &lt;- assign_binding_regions(template.df, fw = leader.fasta, rev = NULL)
template.df &lt;- adjust_binding_regions(template.df, 
        c(-max(template.df$Allowed_End_fw), 0), NULL)

fasta.file &lt;- system.file(&quot;extdata&quot;, &quot;IMGT_data&quot;, &quot;primers&quot;, 
        &quot;IGHV&quot;, &quot;Tiller2008_1st.fasta&quot;, package = &quot;openPrimeR&quot;)
primer.df &lt;- read_primers(fasta.file)
constraint.df &lt;- check_constraints(primer.df, template.df, settings, active.constraints = &quot;primer_coverage&quot;)</code></pre>
</div>
<p>Let’s re-analyze the coverage with the changed settings using <code>check_constraints()</code>:</p>
<div class="tutorial-exercise" data-label="cvg2" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code># Compute the coverage again</code></pre>
<script type="application/json" data-opts-chunk="1">{"fig.width":6.5,"fig.height":4,"fig.retina":2,"fig.align":"default","fig.keep":"high","fig.show":"asis","out.width":624,"warning":true,"error":false,"message":true,"exercise.df_print":"paged","exercise.timelimit":500,"exercise.setup":"cvg_setup3","exercise.checker":"NULL"}</script>
</div>
<div class="tutorial-exercise-support" data-label="cvg2-solution" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>constraint.df &lt;- check_constraints(primer.df, template.df, settings, active.constraints = &quot;primer_coverage&quot;)</code></pre>
</div>
<p>We can visualize template and primer coverage to find out what has changed:</p>
<div class="tutorial-exercise" data-label="cvg_plots2" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code># Plot the template coverage and the primer coverage</code></pre>
<script type="application/json" data-opts-chunk="1">{"fig.width":6.5,"fig.height":4,"fig.retina":2,"fig.align":"default","fig.keep":"high","fig.show":"asis","out.width":624,"warning":true,"error":false,"message":true,"exercise.df_print":"paged","exercise.timelimit":500,"exercise.setup":"cvg_setup3","exercise.checker":"NULL"}</script>
</div>
<div class="tutorial-exercise-support" data-label="cvg_plots2-solution" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>plot_template_cvg(constraint.df, template.df)
plot_primer_cvg(constraint.df, template.df)</code></pre>
</div>
<p>The new results are impressively different to the previous ones. When we allow for more mismatches, quite a large percentage of templates are estimated to be covered and even the <code>VH_1|1</code> primer is revealed to cover multiple template groups at the same time. We can take a closer look at the distribution of coverage events occuring for different numbers of mismatches between primers and templates by supplying the boolean <code>per.mismatch</code> argument to the two plotting functions:</p>
<div class="tutorial-exercise" data-label="cvg_plots3" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code># Plot the template coverage and the primer coverage, stratified by mismatches</code></pre>
<script type="application/json" data-opts-chunk="1">{"fig.width":6.5,"fig.height":4,"fig.retina":2,"fig.align":"default","fig.keep":"high","fig.show":"asis","out.width":624,"warning":true,"error":false,"message":true,"exercise.df_print":"paged","exercise.timelimit":500,"exercise.setup":"cvg_setup3","exercise.checker":"NULL"}</script>
</div>
<div class="tutorial-exercise-support" data-label="cvg_plots3-solution" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>plot_template_cvg(constraint.df, template.df, per.mismatch = TRUE)
plot_primer_cvg(constraint.df, template.df, per.mismatch = TRUE)</code></pre>
</div>
<p>These plots reveal that allowing for only 1 mismatch already provides more than 50% coverage and that most coverage events of <code>VH_1|1</code> occur with at least 6 mismatches.</p>
<p>Note that the estimated coverage takes into account only the properties of the primers that are directly associated with binding to a template (e.g. free energy and mismatches). However, there are many more properties that can influence whether a PCR is successful or not; for example, if a primer forms a complex with another primer in a multiplex reaction, this may greatly reduce product yields. Therefore, the estimated coverage should be used as an indicator that shows how much coverage can be achieved if the other properties of the primers are reasonable. To determine if this is the case, we will move on to analyzing these properties now.</p>
</div>
<div id="section-primer-constraints" class="section level2">
<h2>Primer constraints</h2>
<p>The analysis of the physicochemical properties of the primers is also facilitated by <code>check_cvg_constraints()</code>. Since we’ve already analyzed the primer coverage, we will compute all remaining constraints now by passing a corresponding <code>active.constraints</code> character vector to <code>check_cvg_constraints()</code>:</p>
<div class="tutorial-exercise-support" data-label="my_constraint_setup" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>xml.file &lt;- system.file(&quot;extdata&quot;, &quot;settings&quot;, &quot;B_Taq_PCR_evaluate.xml&quot;,
              package = &quot;openPrimeR&quot;)
settings &lt;- read_settings(xml.file)
constraints(settings) &lt;- constraints(settings)[names(constraints(settings)) != &quot;gc_clamp&quot;]
constraints(settings)$primer_coverage &lt;- c(&quot;min&quot; = 5)
conOptions(settings)$allowed_mismatches &lt;- 7
conOptions(settings)$allowed_other_binding_ratio &lt;- 0
conOptions(settings)$allowed_region_definition &lt;- &quot;any&quot;

fasta.file &lt;- system.file(&quot;extdata&quot;, &quot;IMGT_data&quot;, &quot;templates&quot;, 
        &quot;Homo_sapiens_IGH_functional_exon.fasta&quot;, package = &quot;openPrimeR&quot;)
hdr.structure &lt;- c(&quot;ACCESSION&quot;, &quot;GROUP&quot;, &quot;SPECIES&quot;, &quot;FUNCTION&quot;)
delim &lt;- &quot;|&quot;
template.df &lt;- read_templates(fasta.file, hdr.structure = hdr.structure, 
                                delim = &quot;|&quot;)
leader.fasta &lt;- system.file(&quot;extdata&quot;, &quot;IMGT_data&quot;, &quot;templates&quot;, 
        &quot;Homo_sapiens_IGH_functional_leader.fasta&quot;, package = &quot;openPrimeR&quot;)
template.df &lt;- assign_binding_regions(template.df, fw = leader.fasta, rev = NULL)
template.df &lt;- openPrimeR:::adjust_binding_regions(template.df, 
        c(-max(template.df$Allowed_End_fw), 0), NULL)

fasta.file &lt;- system.file(&quot;extdata&quot;, &quot;IMGT_data&quot;, &quot;primers&quot;, 
        &quot;IGHV&quot;, &quot;Tiller2008_1st.fasta&quot;, package = &quot;openPrimeR&quot;)
primer.df &lt;- read_primers(fasta.file)
constraint.df &lt;- check_constraints(primer.df, template.df, settings, active.constraints = &quot;primer_coverage&quot;)</code></pre>
</div>
<div class="tutorial-exercise" data-label="check_constraints" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code># Check the primer constraints</code></pre>
<script type="application/json" data-opts-chunk="1">{"fig.width":6.5,"fig.height":4,"fig.retina":2,"fig.align":"default","fig.keep":"high","fig.show":"asis","out.width":624,"warning":true,"error":false,"message":true,"exercise.df_print":"paged","exercise.timelimit":500,"exercise.setup":"my_constraint_setup","exercise.checker":"NULL"}</script>
</div>
<div class="tutorial-exercise-support" data-label="check_constraints-solution" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>constraint.df &lt;- check_constraints(constraint.df, template.df, settings,
                 active.constraints = setdiff(names(constraints(settings)), &quot;primer_coverage&quot;))
colnames(constraint.df)</code></pre>
</div>
<p>You can now access the values of the computed properties in <code>constraint.df</code>. Fields containing the keyword <code>EVAL</code> indicate whether a primer passed or failed the constraints defined in <code>settings</code>. Let’s try to access the computed melting temperatures and verify that the temperatures are in the desired range:</p>
<div class="tutorial-exercise-support" data-label="constraint_setup" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>xml.file &lt;- system.file(&quot;extdata&quot;, &quot;settings&quot;, &quot;B_Taq_PCR_evaluate.xml&quot;,
              package = &quot;openPrimeR&quot;)
settings &lt;- read_settings(xml.file)
constraints(settings) &lt;- constraints(settings)[names(constraints(settings)) != &quot;gc_clamp&quot;]
constraints(settings)$primer_coverage &lt;- c(&quot;min&quot; = 5)
conOptions(settings)$allowed_mismatches &lt;- 7
conOptions(settings)$allowed_other_binding_ratio &lt;- 0
conOptions(settings)$allowed_region_definition &lt;- &quot;any&quot;

fasta.file &lt;- system.file(&quot;extdata&quot;, &quot;IMGT_data&quot;, &quot;templates&quot;, 
        &quot;Homo_sapiens_IGH_functional_exon.fasta&quot;, package = &quot;openPrimeR&quot;)
hdr.structure &lt;- c(&quot;ACCESSION&quot;, &quot;GROUP&quot;, &quot;SPECIES&quot;, &quot;FUNCTION&quot;)
delim &lt;- &quot;|&quot;
template.df &lt;- read_templates(fasta.file, hdr.structure = hdr.structure, 
                                delim = &quot;|&quot;)
leader.fasta &lt;- system.file(&quot;extdata&quot;, &quot;IMGT_data&quot;, &quot;templates&quot;, 
        &quot;Homo_sapiens_IGH_functional_leader.fasta&quot;, package = &quot;openPrimeR&quot;)
template.df &lt;- assign_binding_regions(template.df, fw = leader.fasta, rev = NULL)
template.df &lt;- openPrimeR:::adjust_binding_regions(template.df, 
        c(-max(template.df$Allowed_End_fw), 0), NULL)

fasta.file &lt;- system.file(&quot;extdata&quot;, &quot;IMGT_data&quot;, &quot;primers&quot;, 
        &quot;IGHV&quot;, &quot;Tiller2008_1st.fasta&quot;, package = &quot;openPrimeR&quot;)
primer.df &lt;- read_primers(fasta.file)
constraint.df &lt;- check_constraints(primer.df, template.df, settings)</code></pre>
</div>
<div class="tutorial-exercise" data-label="constraint_manual" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code># Verify whether the melting temperatures are in the desired range</code></pre>
<script type="application/json" data-opts-chunk="1">{"fig.width":6.5,"fig.height":4,"fig.retina":2,"fig.align":"default","fig.keep":"high","fig.show":"asis","out.width":624,"warning":true,"error":false,"message":true,"exercise.df_print":"paged","exercise.timelimit":500,"exercise.setup":"constraint_setup","exercise.checker":"NULL"}</script>
</div>
<div class="tutorial-exercise-support" data-label="constraint_manual-solution" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>tm &lt;- constraint.df$melting_temp
print(tm)
print(constraints(settings)$melting_temp_range)
idx &lt;- which(constraint.df$EVAL_melting_temp_range)
print(tm[idx])
print(constraint.df[idx, &quot;melting_temp&quot;] &lt;= constraints(settings)$melting_temp_range[&quot;max&quot;] &amp; 
      constraint.df[idx, &quot;melting_temp&quot;] &gt;= constraints(settings)$melting_temp_range[&quot;min&quot;])</code></pre>
</div>
<p>Since looking at the properties in this way is cumbersome, we’ll just create a visualization showing which primers fulfill the constraints using <code>plot_constraint_fulfillment()</code>:</p>
<div class="tutorial-exercise-support" data-label="constraint_setup2" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code># only because there was an error without this ..
xml.file &lt;- system.file(&quot;extdata&quot;, &quot;settings&quot;, &quot;B_Taq_PCR_evaluate.xml&quot;,
              package = &quot;openPrimeR&quot;)
settings &lt;- read_settings(xml.file)
constraints(settings) &lt;- constraints(settings)[names(constraints(settings)) != &quot;gc_clamp&quot;]
constraints(settings)$primer_coverage &lt;- c(&quot;min&quot; = 5)
conOptions(settings)$allowed_mismatches &lt;- 7
conOptions(settings)$allowed_other_binding_ratio &lt;- 0
conOptions(settings)$allowed_region_definition &lt;- &quot;any&quot;

fasta.file &lt;- system.file(&quot;extdata&quot;, &quot;IMGT_data&quot;, &quot;templates&quot;, 
        &quot;Homo_sapiens_IGH_functional_exon.fasta&quot;, package = &quot;openPrimeR&quot;)
hdr.structure &lt;- c(&quot;ACCESSION&quot;, &quot;GROUP&quot;, &quot;SPECIES&quot;, &quot;FUNCTION&quot;)
delim &lt;- &quot;|&quot;
template.df &lt;- read_templates(fasta.file, hdr.structure = hdr.structure, 
                                delim = &quot;|&quot;)
leader.fasta &lt;- system.file(&quot;extdata&quot;, &quot;IMGT_data&quot;, &quot;templates&quot;, 
        &quot;Homo_sapiens_IGH_functional_leader.fasta&quot;, package = &quot;openPrimeR&quot;)
template.df &lt;- assign_binding_regions(template.df, fw = leader.fasta, rev = NULL)
template.df &lt;- openPrimeR:::adjust_binding_regions(template.df, 
        c(-max(template.df$Allowed_End_fw), 0), NULL)

fasta.file &lt;- system.file(&quot;extdata&quot;, &quot;IMGT_data&quot;, &quot;primers&quot;, 
        &quot;IGHV&quot;, &quot;Tiller2008_1st.fasta&quot;, package = &quot;openPrimeR&quot;)
primer.df &lt;- read_primers(fasta.file)
constraint.df &lt;- check_constraints(primer.df, template.df, settings)</code></pre>
</div>
<div class="tutorial-exercise" data-label="constraint_plot" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code># Plot the constraint fulfillment</code></pre>
<script type="application/json" data-opts-chunk="1">{"fig.width":6.5,"fig.height":4,"fig.retina":2,"fig.align":"default","fig.keep":"high","fig.show":"asis","out.width":624,"warning":true,"error":false,"message":true,"exercise.df_print":"paged","exercise.timelimit":500,"exercise.setup":"constraint_setup","exercise.checker":"NULL"}</script>
</div>
<div class="tutorial-exercise-support" data-label="constraint_plot-solution" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>plot_constraint_fulfillment(constraint.df, settings)</code></pre>
</div>
<p>The plot quickly reveals that the main flaw of this primer set are large deviations between the melting temperatures of the primers: the values span a quite wide range. To quantify the deviations from the target constraint ranges, we can use <code>plot_constraint_deviation</code> to find out how much each constraint was violated:</p>
<div class="tutorial-exercise" data-label="constraint_deviation" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code># Plot the constraint deviation</code></pre>
<script type="application/json" data-opts-chunk="1">{"fig.width":6.5,"fig.height":4,"fig.retina":2,"fig.align":"default","fig.keep":"high","fig.show":"asis","out.width":624,"warning":true,"error":false,"message":true,"exercise.df_print":"paged","exercise.timelimit":500,"exercise.setup":"constraint_setup2","exercise.checker":"NULL"}</script>
</div>
<div class="tutorial-exercise-support" data-label="constraint_deviation-solution" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>plot_constraint_deviation(constraint.df, settings)</code></pre>
</div>
<p>The plot enables us to find that the constraint on the melting temperature deviations was violated the most, while some other constraints were violated only marginally. From these data, we can conclude that the properties of the primers are reasonable overall. However, the high deviations in melting temperatures may require a relative low annealing temperature and therefore lead to unspecific binding of the primers with high melting temperatures.</p>
<p>But, wait, haven’t we forgot something? At the beginning of the tutorial we’ve removed the GC clamp constraint and unfortunately we don’t have any information on the GC clamp now. Could you compute the values for the GC clamp and redraw the plots for the constraints?</p>
<div class="tutorial-exercise" data-label="constraint_gc_clamp" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>constraints(settings)</code></pre>
<script type="application/json" data-opts-chunk="1">{"fig.width":6.5,"fig.height":4,"fig.retina":2,"fig.align":"default","fig.keep":"high","fig.show":"asis","out.width":624,"warning":true,"error":false,"message":true,"exercise.df_print":"paged","exercise.timelimit":500,"exercise.setup":"constraint_setup2","exercise.checker":"NULL"}</script>
</div>
<div class="tutorial-exercise-support" data-label="constraint_gc_clamp-solution" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code># require 1 to 3 terminal GCs
constraints(settings)$gc_clamp &lt;- c(&quot;min&quot; = 1, &quot;max&quot; = 3)
# update the evaluated primers
constraint.df &lt;- check_constraints(constraint.df, template.df, settings, active.constraints = &quot;gc_clamp&quot;)
# visualize the constraints
plot_constraint_fulfillment(constraint.df, settings)
plot_constraint_deviation(constraint.df, settings)</code></pre>
</div>
<p>Great! Finally, we’ve really evaluated all constraints and there were no bad suprises when checking the GC clamp condition. Since we’ve done so much work, we should ensure that our results are stored in some way. For this purpose, there are two options: storing evaluated data as a CSV file or creating a PDF report. Storing the results as a CSV file can be time-saving if you want to re-analyze the same data at a later point in time, while the PDF report can be used for filing the results. You can store primers as a CSV with <code>write_primers()</code> and create a report with <code>create_report()</code>.</p>
</div>
<div id="section-comparing-primer-sets" class="section level2">
<h2>Comparing primer sets</h2>
<p>At its core, comparing primer sets is based on the same functions as analyzing an individual primer set. Therefore, we will now simply load already evaluated sets of primers and their corresponding templates:</p>
<div class="tutorial-exercise" data-label="load_comparison_data" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>sel.sets &lt;- c(&quot;Glas&quot;, &quot;Rubinstein&quot;, &quot;Persson&quot;, &quot;Ippolito&quot;, &quot;Scheid&quot;)
primer.files &lt;- list.files(path = system.file(&quot;extdata&quot;, &quot;IMGT_data&quot;, &quot;comparison&quot;, 
                           &quot;primer_sets&quot;, &quot;IGH&quot;, package = &quot;openPrimeR&quot;),
                pattern = &quot;*\\.csv&quot;, full.names = TRUE)
primer.data &lt;- read_primers(primer.files)
sel.idx &lt;- unlist(lapply(sel.sets, function(x) grep(x, names(primer.data))[1]))
primer.data &lt;- primer.data[sel.idx]
template.files &lt;- rep(system.file(&quot;extdata&quot;, &quot;IMGT_data&quot;, &quot;comparison&quot;, &quot;templates&quot;, 
                              &quot;IGH_templates.csv&quot;, package = &quot;openPrimeR&quot;), 
                              length(primer.data))
template.data &lt;- read_templates(template.files)</code></pre>
<script type="application/json" data-opts-chunk="1">{"fig.width":6.5,"fig.height":4,"fig.retina":2,"fig.align":"default","fig.keep":"high","fig.show":"asis","out.width":624,"warning":true,"error":false,"message":true,"exercise.df_print":"paged","exercise.timelimit":500,"exercise.checker":"NULL"}</script>
</div>
<p>Next, we will compare the coverage of the templates using <code>plot_template_cvg()</code>:</p>
<div class="tutorial-exercise-support" data-label="comparison_setup" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>sel.sets &lt;- c(&quot;Glas&quot;, &quot;Rubinstein&quot;, &quot;Persson&quot;, &quot;Ippolito&quot;, &quot;Scheid&quot;)
primer.files &lt;- list.files(path = system.file(&quot;extdata&quot;, &quot;IMGT_data&quot;, &quot;comparison&quot;, 
                           &quot;primer_sets&quot;, &quot;IGH&quot;, package = &quot;openPrimeR&quot;),
                pattern = &quot;*\\.csv&quot;, full.names = TRUE)
primer.data &lt;- read_primers(primer.files)
sel.idx &lt;- unlist(lapply(sel.sets, function(x) grep(x, names(primer.data))[1]))
primer.data &lt;- primer.data[sel.idx]
template.files &lt;- rep(system.file(&quot;extdata&quot;, &quot;IMGT_data&quot;, &quot;comparison&quot;, &quot;templates&quot;, 
                              &quot;IGH_templates.csv&quot;, package = &quot;openPrimeR&quot;), 
                              length(primer.data))
template.data &lt;- read_templates(template.files)</code></pre>
</div>
<div class="tutorial-exercise" data-label="comparison_cvg" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code># Plot the template coverage</code></pre>
<script type="application/json" data-opts-chunk="1">{"fig.width":6.5,"fig.height":4,"fig.retina":2,"fig.align":"default","fig.keep":"high","fig.show":"asis","out.width":624,"warning":true,"error":false,"message":true,"exercise.df_print":"paged","exercise.timelimit":500,"exercise.setup":"comparison_setup","exercise.checker":"NULL"}</script>
</div>
<div class="tutorial-exercise-support" data-label="comparison_cvg-solution" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>plot_template_cvg(primer.data, template.data)</code></pre>
</div>
<p>The plot shows that the primer sets from Ippolito, Schied, and Glas achieve similarly high coverages. The sets from Person and Rubinstein lack coverage of IGHV2. Hence, looking just at this plot, the primer set from Ippolito seems to be the best. To make a more informed decision, let’s analyze the distribution of coverage events with regard to mismatches:</p>
<div class="tutorial-exercise" data-label="comparison_cvg_mm" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code># Plot the template coverage with mismatches</code></pre>
<script type="application/json" data-opts-chunk="1">{"fig.width":6.5,"fig.height":4,"fig.retina":2,"fig.align":"default","fig.keep":"high","fig.show":"asis","out.width":624,"warning":true,"error":false,"message":true,"exercise.df_print":"paged","exercise.timelimit":500,"exercise.setup":"comparison_setup","exercise.checker":"NULL"}</script>
</div>
<div class="tutorial-exercise-support" data-label="comparison_cvg_mm-solution" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>plot_template_cvg(primer.data, template.data, per.mismatch = TRUE)</code></pre>
</div>
<p>The plot indicates that the Ippolito set also performs best with regards to mismatches. The set guarantees high coverages already without introducing many mutations into the sequences. The sets from Scheid and Glas perform similarly well for few mismatches. Apart from the coverage, the number of primers may be of concern when selecting a suitable primer set. We can analyze the relationship between the percentage of covered templates and the size of the primer sets through <code>plot_cvg_vs_set_size()</code>:</p>
<div class="tutorial-exercise" data-label="comparison_size" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code># Plot coverage vs size of primer set</code></pre>
<script type="application/json" data-opts-chunk="1">{"fig.width":6.5,"fig.height":4,"fig.retina":2,"fig.align":"default","fig.keep":"high","fig.show":"asis","out.width":624,"warning":true,"error":false,"message":true,"exercise.df_print":"paged","exercise.timelimit":500,"exercise.setup":"comparison_setup","exercise.checker":"NULL"}</script>
</div>
<div class="tutorial-exercise-support" data-label="comparison_size-solution" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>plot_cvg_vs_set_size(primer.data, template.data)</code></pre>
</div>
<p>The plot reveals that the primer set from Persson is the smallest set and that the sets from both Scheid and Glas are quite large. The radius of the points indicates the degree to which the primer sets fulfill the constraints on the physicochemical properties: there seem to be only slight differences in the ratios of fulfilled constraints. Therefore, we’ll now take a look at which constraints are unsatisfied by using <code>plot_constraint_fulfillment()</code> and determine the extent to which the constraints are broken using <code>plot_constraint_deviation()</code>:</p>
<div class="tutorial-exercise-support" data-label="comparison_setup2" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>library(openPrimeR)
xml.file &lt;- system.file(&quot;extdata&quot;, &quot;settings&quot;, &quot;B_Taq_PCR_evaluate.xml&quot;,
              package = &quot;openPrimeR&quot;)
settings &lt;- read_settings(xml.file)
# don&#39;t consider specificity: we don&#39;t want to interpret this here ..
constraints(settings) &lt;- constraints(settings)[names(constraints(settings)) != &quot;primer_specificity&quot;]
sel.sets &lt;- c(&quot;Glas&quot;, &quot;Rubinstein&quot;, &quot;Persson&quot;, &quot;Ippolito&quot;, &quot;Scheid&quot;)
primer.files &lt;- list.files(path = system.file(&quot;extdata&quot;, &quot;IMGT_data&quot;, &quot;comparison&quot;, 
                           &quot;primer_sets&quot;, &quot;IGH&quot;, package = &quot;openPrimeR&quot;),
                pattern = &quot;*\\.csv&quot;, full.names = TRUE)
primer.data &lt;- read_primers(primer.files)
sel.idx &lt;- unlist(lapply(sel.sets, function(x) grep(x, names(primer.data))[1]))
primer.data &lt;- primer.data[sel.idx]
template.files &lt;- rep(system.file(&quot;extdata&quot;, &quot;IMGT_data&quot;, &quot;comparison&quot;, &quot;templates&quot;, 
                              &quot;IGH_templates.csv&quot;, package = &quot;openPrimeR&quot;), 
                              length(primer.data))
template.data &lt;- read_templates(template.files)</code></pre>
</div>
<div class="tutorial-exercise" data-label="comparison_deviation" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code># Plot the deviation from the constraints per primer set</code></pre>
<script type="application/json" data-opts-chunk="1">{"fig.width":6.5,"fig.height":4,"fig.retina":2,"fig.align":"default","fig.keep":"high","fig.show":"asis","out.width":624,"warning":true,"error":false,"message":true,"exercise.df_print":"paged","exercise.timelimit":500,"exercise.setup":"comparison_setup2","exercise.checker":"NULL"}</script>
</div>
<div class="tutorial-exercise-support" data-label="comparison_deviation-solution" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>plot_constraint_fulfillment(primer.data, settings)
plot_constraint_deviation(primer.data, settings)</code></pre>
</div>
<p>Looking at the results, the most crucial shortcomings of the sets are the following:</p>
<ul>
<li>Although the extent of cross dimerization is limited, it may still cause problems for all sets.</li>
<li>All primers except those from Persson have high melting temperature deviations. The melting temperature deviation for the Ippolito set may still be acceptable.</li>
<li>Some primers from Glas may form considerable secondary structures.</li>
</ul>
<p>In summary, the primers from Persson fulfill the constraints extremely well. The sets from Glas, Rubinstein, and Scheid may be problematic due to the high melting temperature deviations.</p>
<p>Finally, let us consider the regions where the primers bind in the templates. Since we’ve allowed for off-target binding events it’s important to verify whether the primers bind close to the target region or not using <code>plot_primer_binding_regions()</code>:</p>
<div class="tutorial-exercise" data-label="comparison_binding_regions" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code># Plot the binding positions of the primers</code></pre>
<script type="application/json" data-opts-chunk="1">{"fig.width":6.5,"fig.height":4,"fig.retina":2,"fig.align":"default","fig.keep":"high","fig.show":"asis","out.width":624,"warning":true,"error":false,"message":true,"exercise.df_print":"paged","exercise.timelimit":500,"exercise.setup":"comparison_setup2","exercise.checker":"NULL"}</script>
</div>
<div class="tutorial-exercise-support" data-label="comparison_binding_regions-solution" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>plot_primer_binding_regions(primer.data, template.data)</code></pre>
</div>
<p>In this case, the blue region indicates the leader of the immunologublins, while the red region shows the variable exon region. Hence, the primers should start amplifying the templates at position 0 (the start of the exon) at the latest. However, this is not the case for all primer sets:</p>
<ul>
<li>The primers from Glas seem to bind along the full range of the sequence, which would result in shortened amplicons</li>
<li>For the sets from Rubinstein, Persson, and Scheid, at least one primer seems to bind too far downstream</li>
<li>All primers from Ippolito bind directly at the start of the exon</li>
<li>The primers from Scheid mainly bind to the leader, which can be favorable for amplifying highly mutated immunoglobulins</li>
</ul>
<p>Considering all criteria, we would probably want to select the set from Ippolito due to the following reasons:</p>
<ul>
<li>The set has the highest coverage of templates, also for few mismatches</li>
<li>The set is quite small</li>
<li>It fulfills the desirable constraints for primers reasonably well</li>
</ul>
<p>Note that the set from Scheid is the runners-up as it has the second-highest coverage and binds to the leader, which none of the other sets do. However, the deviation between the melting temperatures of its primers may be detrimental.</p>
<p>Finally, to store the results you may want to create a PDF report using <code>create_report</code>.</p>
</div>
<div id="section-designing-primers" class="section level2">
<h2>Designing primers</h2>
<p>Designing primers is done via <code>design_primers()</code>. Before designing primers, you should perform the following steps:</p>
<ol style="list-style-type: decimal">
<li>Load the template sequences</li>
<li>Annotate the target binding regions in the templates</li>
<li>Define the primer design settings</li>
<li>Customize the functionality of the primer design procedure</li>
</ol>
<p>You should be familiar with steps 1 to 3 from the previous tutorial sections already, so we will quickly go through these steps and then give more details on the fourth step, customizing the primer design procedure. In this part of the tutorial, we will design forward primers for the leaders of the heavy chain of human germline immunoglobulins.</p>
<div id="section-loading-templates-1" class="section level3">
<h3>Loading templates</h3>
<p>You can load template sequences from a FASTA file with <code>read_templates()</code>:</p>
<div class="tutorial-exercise" data-label="load_templates_design" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>fasta.file &lt;- system.file(&quot;extdata&quot;, &quot;IMGT_data&quot;, &quot;templates&quot;, 
        &quot;Homo_sapiens_IGH_functional_exon.fasta&quot;, package = &quot;openPrimeR&quot;)
# Load the template data</code></pre>
<script type="application/json" data-opts-chunk="1">{"fig.width":6.5,"fig.height":4,"fig.retina":2,"fig.align":"default","fig.keep":"high","fig.show":"asis","out.width":624,"warning":true,"error":false,"message":true,"exercise.df_print":"paged","exercise.timelimit":500,"exercise.checker":"NULL"}</script>
</div>
<div class="tutorial-exercise-support" data-label="load_templates_design-solution" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>fasta.file &lt;- system.file(&quot;extdata&quot;, &quot;IMGT_data&quot;, &quot;templates&quot;, 
        &quot;Homo_sapiens_IGH_functional_exon.fasta&quot;, package = &quot;openPrimeR&quot;)
# Load the template data
hdr.structure &lt;- c(&quot;ACCESSION&quot;, &quot;GROUP&quot;, &quot;SPECIES&quot;, &quot;FUNCTION&quot;)
template.df &lt;- read_templates(fasta.file, hdr.structure = hdr.structure, 
                              delim = &quot;|&quot;)</code></pre>
</div>
<div class="tutorial-exercise-support" data-label="loaded_templates_design" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code>fasta.file &lt;- system.file(&quot;extdata&quot;, &quot;IMGT_data&quot;, &quot;templates&quot;, 
        &quot;Homo_sapiens_IGH_functional_exon.fasta&quot;, package = &quot;openPrimeR&quot;)
# Load the template data
hdr.structure &lt;- c(&quot;ACCESSION&quot;, &quot;GROUP&quot;, &quot;SPECIES&quot;, &quot;FUNCTION&quot;)
template.df &lt;- read_templates(fasta.file, hdr.structure = hdr.structure, 
                              delim = &quot;|&quot;)</code></pre>
</div>
</div>
<div id="section-annotating-binding-regions" class="section level3">
<h3>Annotating binding regions</h3>
<p>Here, we will adjust the target binding regions uniformly across all templates with <code>assign_binding_regions()</code>:</p>
<div class="tutorial-exercise" data-label="binding_uniform" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code># Specify the first 30 bases as the binding region for forward primers:</code></pre>
<script type="application/json" data-opts-chunk="1">{"fig.width":6.5,"fig.height":4,"fig.retina":2,"fig.align":"default","fig.keep":"high","fig.show":"asis","out.width":624,"warning":true,"error":false,"message":true,"exercise.df_print":"paged","exercise.timelimit":500,"exercise.setup":"loaded_templates_design","exercise.checker":"NULL"}</script>
</div>
<div class="tutorial-exercise-support" data-label="binding_uniform-solution" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code># Specify the first 30 bases as the binding region for forward primers:
template.df &lt;- assign_binding_regions(template.df, fw = c(1,30))</code></pre>
</div>
</div>
<div id="section-defining-the-design-settings" class="section level3">
<h3>Defining the design settings</h3>
<p>The default settings for designing primers can be loaded via <code>read_settings()</code> in the following way:</p>
<div class="tutorial-exercise" data-label="read_settings_design" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code># Load default settings from a supplied XML file:
xml.file &lt;- system.file(&quot;extdata&quot;, &quot;settings&quot;, &quot;A_Taq_PCR_design.xml&quot;,
              package = &quot;openPrimeR&quot;)</code></pre>
<script type="application/json" data-opts-chunk="1">{"fig.width":6.5,"fig.height":4,"fig.retina":2,"fig.align":"default","fig.keep":"high","fig.show":"asis","out.width":624,"warning":true,"error":false,"message":true,"exercise.df_print":"paged","exercise.timelimit":500,"exercise.checker":"NULL"}</script>
</div>
<div class="tutorial-exercise" data-label="read_settings_design-solution" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code># Load default settings from a supplied XML file:
xml.file &lt;- system.file(&quot;extdata&quot;, &quot;settings&quot;, &quot;A_Taq_PCR_design.xml&quot;,
              package = &quot;openPrimeR&quot;)
settings &lt;- read_settings(xml.file)</code></pre>
<script type="application/json" data-opts-chunk="1">{"fig.width":6.5,"fig.height":4,"fig.retina":2,"fig.align":"default","fig.keep":"high","fig.show":"asis","out.width":624,"warning":true,"error":false,"message":true,"exercise.df_print":"paged","exercise.timelimit":500,"exercise.checker":"NULL"}</script>
</div>
<div class="tutorial-exercise-support" data-label="loaded_settings_design_pre" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code># Load default settings from a supplied XML file:
xml.file &lt;- system.file(&quot;extdata&quot;, &quot;settings&quot;, &quot;A_Taq_PCR_design.xml&quot;,
              package = &quot;openPrimeR&quot;)
settings &lt;- read_settings(xml.file)</code></pre>
</div>
<p>Having loaded the supplied settings, it is your job to verify the settings for your primer design task. Here is a list of considerations that may be relevant for you:</p>
<ul>
<li>Are the specified constraints appropriate? Primers that do not fulfill the specified constraints are filtered. If the constraints are too narrow, it may not be possible to find a suitable set of primers. You can check/modify the constraints via <code>constraints()</code>.</li>
<li>Are the specified constraint limits appropriate? The constraint limits define the speed at which the constraints are relaxed in case that no suitable set of primers could be found. The constraint limits can be checked/modified with <code>constraintLimits()</code>.</li>
<li>Are the coverage constraints appropriate? The coverage constraints determine when a template is expected to be amplified by a primer. For designing primers, a more stringent coverage definition should be used to ensure that the designed set of primers is likely to amplify all target templates. The coverage conditions can be accessed via <code>cvg_constraints()</code>.</li>
<li>Are the constraint options specified correctly? Most importantly, ensure that the maximal number of mismatches is specified according to your requirements. For this purpose, you can use <code>conOptions()</code>.</li>
<li>Do the specified PCR conditions match your experimental conditions? It is particularly important to specify the ion concentrations such that the thermodynamic calculations are accurate. The PCR conditions can be accessed with <code>PCR()</code>.</li>
</ul>
<p>Possible fields for each slot of the settings object are described in the openPrimeR manual. Inactive fields are shown when printing the settings object:</p>
<div class="tutorial-exercise" data-label="print_settings" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code># Print the settings object to view the currently active settings, as well as other possible, inactive settings</code></pre>
<script type="application/json" data-opts-chunk="1">{"fig.width":6.5,"fig.height":4,"fig.retina":2,"fig.align":"default","fig.keep":"high","fig.show":"asis","out.width":624,"warning":true,"error":false,"message":true,"exercise.df_print":"paged","exercise.timelimit":500,"exercise.setup":"loaded_settings_design_pre","exercise.checker":"NULL"}</script>
</div>
<div class="tutorial-exercise-support" data-label="print_settings-solution" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code># Print the settings object to view the currently active settings, as well as other possible, inactive settings
print(settings)</code></pre>
</div>
<p>After carefully considering the settings, you may want to adjust the functionality of the primer design procedure.</p>
</div>
<div id="section-customizing-the-primer-design-procedure" class="section level3">
<h3>Customizing the primer design procedure</h3>
<p>The <code>design_primers()</code> function lets you customize how the primer design function works. The main steps of the algorithm are:</p>
<ol style="list-style-type: decimal">
<li>Initialization of primer candidates.</li>
<li>Filtering of primer candidates according to the constraints.</li>
<li>Selection of an optimized set of primers.</li>
</ol>
</div>
<div id="section-initialization-of-primer-candidates" class="section level3">
<h3>Initialization of primer candidates</h3>
<p>The procedure for initializing a set of primers is controlled by the <code>init.algo</code> argument. When set to <code>naive</code>, primers are initialized by extracting substrings from the input templates. If <code>init.algo</code> is set to <code>tree</code>, degenerate primeres are created. The maximal degeneration can be controlled via the <code>max.degen</code> argument.</p>
</div>
<div id="section-filtering-of-primers" class="section level3">
<h3>Filtering of primers</h3>
<p>The filtering procedure is obviously most affected by the constraints that are provided in the <code>settings</code> object passed to <code>design_primers</code>. However, there are also other arguments that influence the filtering procedure. Most importantly, <code>required.cvg</code> provides a numeric in the range [0,1] which indicates the desired coverage ratio of the templates. If the desired coverage ratio is not possible anymore because too many primers were removed during the filtering procedure, a relaxation procedure is initialized. This procedure adjusts the constraints such that more primers are selected in order to reach the target coverage ratio.</p>
</div>
<div id="section-selection-of-optimal-primers" class="section level3">
<h3>Selection of optimal primers</h3>
<p>The selection of an optimal set of primers (i.e. solving the set cover problem) can be performed either by a greedy algorithm or an integer linear program. While the worst-case runtime of the greedy algorithm is better than that of the integer linear program, the integer linear program may be able to find a smaller set of optimal primers than the greedy algorithm. To use the greedy algorithm, set the <code>opti.algo</code> argument to <code>Greedy</code> and to use an integer linear program set <code>opti.algo</code> to <code>ILP</code>.</p>
</div>
<div id="section-using-the-primer-design-function" class="section level3">
<h3>Using the primer design function</h3>
<div class="tutorial-exercise" data-label="design_settings" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code># Load templates
fasta.file &lt;- system.file(&quot;extdata&quot;, &quot;IMGT_data&quot;, &quot;templates&quot;, 
        &quot;Homo_sapiens_IGH_functional_exon.fasta&quot;, package = &quot;openPrimeR&quot;)
hdr.structure &lt;- c(&quot;ACCESSION&quot;, &quot;GROUP&quot;, &quot;SPECIES&quot;, &quot;FUNCTION&quot;)
template.df &lt;- read_templates(fasta.file, hdr.structure = hdr.structure, 
                              delim = &quot;|&quot;)
# Define binding regions
template.df &lt;- assign_binding_regions(template.df, fw = c(1,30))
# Load settings
xml.file &lt;- system.file(&quot;extdata&quot;, &quot;settings&quot;, &quot;A_Taq_PCR_design.xml&quot;,
              package = &quot;openPrimeR&quot;)
settings &lt;- read_settings(xml.file)
# Modify settings
constraints(settings)$primer_length &lt;- c(&quot;min&quot; = 18, &quot;max&quot; = 18)
# Design forward primers (only for the first 5 templates) with naive initialization, and greedy optimization:</code></pre>
<script type="application/json" data-opts-chunk="1">{"fig.width":6.5,"fig.height":4,"fig.retina":2,"fig.align":"default","fig.keep":"high","fig.show":"asis","out.width":624,"warning":true,"error":false,"message":true,"exercise.df_print":"paged","exercise.timelimit":500,"exercise.checker":"NULL"}</script>
</div>
<div class="tutorial-exercise-support" data-label="design_settings-solution" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code># Load templates
fasta.file &lt;- system.file(&quot;extdata&quot;, &quot;IMGT_data&quot;, &quot;templates&quot;, 
        &quot;Homo_sapiens_IGH_functional_exon.fasta&quot;, package = &quot;openPrimeR&quot;)
hdr.structure &lt;- c(&quot;ACCESSION&quot;, &quot;GROUP&quot;, &quot;SPECIES&quot;, &quot;FUNCTION&quot;)
template.df &lt;- read_templates(fasta.file, hdr.structure = hdr.structure, 
                              delim = &quot;|&quot;)
# Define binding regions
template.df &lt;- assign_binding_regions(template.df, fw = c(1,30))
# Load settings
xml.file &lt;- system.file(&quot;extdata&quot;, &quot;settings&quot;, &quot;A_Taq_PCR_design.xml&quot;,
              package = &quot;openPrimeR&quot;)
settings &lt;- read_settings(xml.file)
# Modify settings
constraints(settings)$primer_length &lt;- c(&quot;min&quot; = 18, &quot;max&quot; = 18)
# Design forward primers (only for the first 5 templates) with naive initialization, and greedy optimization:
primer.df &lt;- design_primers(template.df[1:5,], &quot;fw&quot;, settings,
                init.algo = &quot;naive&quot;, opti.algo = &quot;Greedy&quot;)</code></pre>
</div>
<p>We can now verify the quality of the designed primers:</p>
<div class="tutorial-exercise-support" data-label="design_settings_setup" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code># Load templates
fasta.file &lt;- system.file(&quot;extdata&quot;, &quot;IMGT_data&quot;, &quot;templates&quot;, 
        &quot;Homo_sapiens_IGH_functional_exon.fasta&quot;, package = &quot;openPrimeR&quot;)
hdr.structure &lt;- c(&quot;ACCESSION&quot;, &quot;GROUP&quot;, &quot;SPECIES&quot;, &quot;FUNCTION&quot;)
template.df &lt;- read_templates(fasta.file, hdr.structure = hdr.structure, 
                              delim = &quot;|&quot;)
# Define binding regions
template.df &lt;- assign_binding_regions(template.df, fw = c(1,30))
# Load settings
xml.file &lt;- system.file(&quot;extdata&quot;, &quot;settings&quot;, &quot;A_Taq_PCR_design.xml&quot;,
              package = &quot;openPrimeR&quot;)
settings &lt;- read_settings(xml.file)
# Modify settings
constraints(settings)$primer_length &lt;- c(&quot;min&quot; = 18, &quot;max&quot; = 18)
# Design forward primers (only for the first 5 templates) with naive initialization, and greedy optimization:
design.data &lt;- design_primers(template.df[1:5,], &quot;fw&quot;, settings,
                init.algo = &quot;naive&quot;, opti.algo = &quot;Greedy&quot;)</code></pre>
</div>
<div class="tutorial-exercise" data-label="design_analysis1" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code># Determine the size of the optimized set:

# Determine the coverage of the optimized set

# Visualize the constraints

# Which constraints were used for the design?

# Are there good sets at other melting temperatures?

# Which primers passed the filtering procedure?

# How many primers were excluded per primer during filtering?</code></pre>
<script type="application/json" data-opts-chunk="1">{"fig.width":6.5,"fig.height":4,"fig.retina":2,"fig.align":"default","fig.keep":"high","fig.show":"asis","out.width":624,"warning":true,"error":false,"message":false,"exercise.df_print":"paged","exercise.timelimit":500,"exercise.setup":"design_settings_setup","exercise.checker":"NULL"}</script>
</div>
<div class="tutorial-exercise-support" data-label="design_analysis1-solution" data-caption="Code" data-completion="1" data-diagnostics="1" data-startover="1" data-lines="0">
<pre class="text"><code># Determine the size of the optimized set:
primer.df &lt;- design.data$opti
nrow(primer.df)
# Determine the coverage of the optimized set
get_cvg_ratio(primer.df, template.df[1:5])
# Visualize the constraints
plot_constraint_deviation(primer.df, settings)
# Which constraints were used for the design?
design.data$used_constraints
# Are there good sets at other melting temperatures?
design.data$all_results
# Which primers passed the filtering procedure?
design.data$filtered$data
# How many primers were excluded per primer during filtering?
design.data$filtered$stats</code></pre>
</div>

<script type="application/shiny-prerendered" data-context="server-start">
# global variables don't work for some reason ...
library(learnr)
library(openPrimeR)
tutorial_options(exercise.timelimit = 500)
</script>
 
<script type="application/shiny-prerendered" data-context="server">
learnr:::register_http_handlers(session, metadata = NULL)
</script>
 
<script type="application/shiny-prerendered" data-context="server">
`tutorial-exercise-load_templates_FASTA_1-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-load_templates_FASTA_1-code-editor`)), session)
output$`tutorial-exercise-load_templates_FASTA_1-output` <- renderUI({
  `tutorial-exercise-load_templates_FASTA_1-result`()
})
</script>
 
<script type="application/shiny-prerendered" data-context="server">
`tutorial-exercise-load_templates_FASTA_2-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-load_templates_FASTA_2-code-editor`)), session)
output$`tutorial-exercise-load_templates_FASTA_2-output` <- renderUI({
  `tutorial-exercise-load_templates_FASTA_2-result`()
})
</script>
 
<script type="application/shiny-prerendered" data-context="server">
`tutorial-exercise-load_templates_FASTA_3-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-load_templates_FASTA_3-code-editor`)), session)
output$`tutorial-exercise-load_templates_FASTA_3-output` <- renderUI({
  `tutorial-exercise-load_templates_FASTA_3-result`()
})
</script>
 
<script type="application/shiny-prerendered" data-context="server">
`tutorial-exercise-leader_file-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-leader_file-code-editor`)), session)
output$`tutorial-exercise-leader_file-output` <- renderUI({
  `tutorial-exercise-leader_file-result`()
})
</script>
 
<script type="application/shiny-prerendered" data-context="server">
`tutorial-exercise-assign_leader-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-assign_leader-code-editor`)), session)
output$`tutorial-exercise-assign_leader-output` <- renderUI({
  `tutorial-exercise-assign_leader-result`()
})
</script>
 
<script type="application/shiny-prerendered" data-context="server">
`tutorial-exercise-final_regions-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-final_regions-code-editor`)), session)
output$`tutorial-exercise-final_regions-output` <- renderUI({
  `tutorial-exercise-final_regions-result`()
})
</script>
 
<script type="application/shiny-prerendered" data-context="server">
`tutorial-exercise-primer_FASTA_1-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-primer_FASTA_1-code-editor`)), session)
output$`tutorial-exercise-primer_FASTA_1-output` <- renderUI({
  `tutorial-exercise-primer_FASTA_1-result`()
})
</script>
 
<script type="application/shiny-prerendered" data-context="server">
`tutorial-exercise-primer_FASTA_2-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-primer_FASTA_2-code-editor`)), session)
output$`tutorial-exercise-primer_FASTA_2-output` <- renderUI({
  `tutorial-exercise-primer_FASTA_2-result`()
})
</script>
 
<script type="application/shiny-prerendered" data-context="server">
`tutorial-exercise-read_settings-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-read_settings-code-editor`)), session)
output$`tutorial-exercise-read_settings-output` <- renderUI({
  `tutorial-exercise-read_settings-result`()
})
</script>
 
<script type="application/shiny-prerendered" data-context="server">
`tutorial-exercise-settings_structure-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-settings_structure-code-editor`)), session)
output$`tutorial-exercise-settings_structure-output` <- renderUI({
  `tutorial-exercise-settings_structure-result`()
})
</script>
 
<script type="application/shiny-prerendered" data-context="server">
`tutorial-exercise-settings_constraints-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-settings_constraints-code-editor`)), session)
output$`tutorial-exercise-settings_constraints-output` <- renderUI({
  `tutorial-exercise-settings_constraints-result`()
})
</script>
 
<script type="application/shiny-prerendered" data-context="server">
`tutorial-exercise-modify_constraints-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-modify_constraints-code-editor`)), session)
output$`tutorial-exercise-modify_constraints-output` <- renderUI({
  `tutorial-exercise-modify_constraints-result`()
})
</script>
 
<script type="application/shiny-prerendered" data-context="server">
`tutorial-exercise-cvg_constraints-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-cvg_constraints-code-editor`)), session)
output$`tutorial-exercise-cvg_constraints-output` <- renderUI({
  `tutorial-exercise-cvg_constraints-result`()
})
</script>
 
<script type="application/shiny-prerendered" data-context="server">
`tutorial-exercise-con_options-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-con_options-code-editor`)), session)
output$`tutorial-exercise-con_options-output` <- renderUI({
  `tutorial-exercise-con_options-result`()
})
</script>
 
<script type="application/shiny-prerendered" data-context="server">
`tutorial-exercise-con_options_mod-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-con_options_mod-code-editor`)), session)
output$`tutorial-exercise-con_options_mod-output` <- renderUI({
  `tutorial-exercise-con_options_mod-result`()
})
</script>
 
<script type="application/shiny-prerendered" data-context="server">
`tutorial-exercise-settings_PCR-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-settings_PCR-code-editor`)), session)
output$`tutorial-exercise-settings_PCR-output` <- renderUI({
  `tutorial-exercise-settings_PCR-result`()
})
</script>
 
<script type="application/shiny-prerendered" data-context="server">
`tutorial-exercise-check1-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-check1-code-editor`)), session)
output$`tutorial-exercise-check1-output` <- renderUI({
  `tutorial-exercise-check1-result`()
})
</script>
 
<script type="application/shiny-prerendered" data-context="server">
`tutorial-exercise-highest_cvg-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-highest_cvg-code-editor`)), session)
output$`tutorial-exercise-highest_cvg-output` <- renderUI({
  `tutorial-exercise-highest_cvg-result`()
})
</script>
 
<script type="application/shiny-prerendered" data-context="server">
`tutorial-exercise-template_cvg_plot-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-template_cvg_plot-code-editor`)), session)
output$`tutorial-exercise-template_cvg_plot-output` <- renderUI({
  `tutorial-exercise-template_cvg_plot-result`()
})
</script>
 
<script type="application/shiny-prerendered" data-context="server">
`tutorial-exercise-primer_cvg_plot-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-primer_cvg_plot-code-editor`)), session)
output$`tutorial-exercise-primer_cvg_plot-output` <- renderUI({
  `tutorial-exercise-primer_cvg_plot-result`()
})
</script>
 
<script type="application/shiny-prerendered" data-context="server">
`tutorial-exercise-mod_settings_cvg-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-mod_settings_cvg-code-editor`)), session)
output$`tutorial-exercise-mod_settings_cvg-output` <- renderUI({
  `tutorial-exercise-mod_settings_cvg-result`()
})
</script>
 
<script type="application/shiny-prerendered" data-context="server">
`tutorial-exercise-cvg2-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-cvg2-code-editor`)), session)
output$`tutorial-exercise-cvg2-output` <- renderUI({
  `tutorial-exercise-cvg2-result`()
})
</script>
 
<script type="application/shiny-prerendered" data-context="server">
`tutorial-exercise-cvg_plots2-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-cvg_plots2-code-editor`)), session)
output$`tutorial-exercise-cvg_plots2-output` <- renderUI({
  `tutorial-exercise-cvg_plots2-result`()
})
</script>
 
<script type="application/shiny-prerendered" data-context="server">
`tutorial-exercise-cvg_plots3-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-cvg_plots3-code-editor`)), session)
output$`tutorial-exercise-cvg_plots3-output` <- renderUI({
  `tutorial-exercise-cvg_plots3-result`()
})
</script>
 
<script type="application/shiny-prerendered" data-context="server">
`tutorial-exercise-check_constraints-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-check_constraints-code-editor`)), session)
output$`tutorial-exercise-check_constraints-output` <- renderUI({
  `tutorial-exercise-check_constraints-result`()
})
</script>
 
<script type="application/shiny-prerendered" data-context="server">
`tutorial-exercise-constraint_manual-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-constraint_manual-code-editor`)), session)
output$`tutorial-exercise-constraint_manual-output` <- renderUI({
  `tutorial-exercise-constraint_manual-result`()
})
</script>
 
<script type="application/shiny-prerendered" data-context="server">
`tutorial-exercise-constraint_plot-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-constraint_plot-code-editor`)), session)
output$`tutorial-exercise-constraint_plot-output` <- renderUI({
  `tutorial-exercise-constraint_plot-result`()
})
</script>
 
<script type="application/shiny-prerendered" data-context="server">
`tutorial-exercise-constraint_deviation-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-constraint_deviation-code-editor`)), session)
output$`tutorial-exercise-constraint_deviation-output` <- renderUI({
  `tutorial-exercise-constraint_deviation-result`()
})
</script>
 
<script type="application/shiny-prerendered" data-context="server">
`tutorial-exercise-constraint_gc_clamp-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-constraint_gc_clamp-code-editor`)), session)
output$`tutorial-exercise-constraint_gc_clamp-output` <- renderUI({
  `tutorial-exercise-constraint_gc_clamp-result`()
})
</script>
 
<script type="application/shiny-prerendered" data-context="server">
`tutorial-exercise-load_comparison_data-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-load_comparison_data-code-editor`)), session)
output$`tutorial-exercise-load_comparison_data-output` <- renderUI({
  `tutorial-exercise-load_comparison_data-result`()
})
</script>
 
<script type="application/shiny-prerendered" data-context="server">
`tutorial-exercise-comparison_cvg-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-comparison_cvg-code-editor`)), session)
output$`tutorial-exercise-comparison_cvg-output` <- renderUI({
  `tutorial-exercise-comparison_cvg-result`()
})
</script>
 
<script type="application/shiny-prerendered" data-context="server">
`tutorial-exercise-comparison_cvg_mm-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-comparison_cvg_mm-code-editor`)), session)
output$`tutorial-exercise-comparison_cvg_mm-output` <- renderUI({
  `tutorial-exercise-comparison_cvg_mm-result`()
})
</script>
 
<script type="application/shiny-prerendered" data-context="server">
`tutorial-exercise-comparison_size-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-comparison_size-code-editor`)), session)
output$`tutorial-exercise-comparison_size-output` <- renderUI({
  `tutorial-exercise-comparison_size-result`()
})
</script>
 
<script type="application/shiny-prerendered" data-context="server">
`tutorial-exercise-comparison_deviation-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-comparison_deviation-code-editor`)), session)
output$`tutorial-exercise-comparison_deviation-output` <- renderUI({
  `tutorial-exercise-comparison_deviation-result`()
})
</script>
 
<script type="application/shiny-prerendered" data-context="server">
`tutorial-exercise-comparison_binding_regions-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-comparison_binding_regions-code-editor`)), session)
output$`tutorial-exercise-comparison_binding_regions-output` <- renderUI({
  `tutorial-exercise-comparison_binding_regions-result`()
})
</script>
 
<script type="application/shiny-prerendered" data-context="server">
`tutorial-exercise-load_templates_design-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-load_templates_design-code-editor`)), session)
output$`tutorial-exercise-load_templates_design-output` <- renderUI({
  `tutorial-exercise-load_templates_design-result`()
})
</script>
 
<script type="application/shiny-prerendered" data-context="server">
`tutorial-exercise-binding_uniform-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-binding_uniform-code-editor`)), session)
output$`tutorial-exercise-binding_uniform-output` <- renderUI({
  `tutorial-exercise-binding_uniform-result`()
})
</script>
 
<script type="application/shiny-prerendered" data-context="server">
`tutorial-exercise-read_settings_design-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-read_settings_design-code-editor`)), session)
output$`tutorial-exercise-read_settings_design-output` <- renderUI({
  `tutorial-exercise-read_settings_design-result`()
})
</script>
 
<script type="application/shiny-prerendered" data-context="server">
`tutorial-exercise-read_settings_design-solution-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-read_settings_design-solution-code-editor`)), session)
output$`tutorial-exercise-read_settings_design-solution-output` <- renderUI({
  `tutorial-exercise-read_settings_design-solution-result`()
})
</script>
 
<script type="application/shiny-prerendered" data-context="server">
`tutorial-exercise-print_settings-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-print_settings-code-editor`)), session)
output$`tutorial-exercise-print_settings-output` <- renderUI({
  `tutorial-exercise-print_settings-result`()
})
</script>
 
<script type="application/shiny-prerendered" data-context="server">
`tutorial-exercise-design_settings-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-design_settings-code-editor`)), session)
output$`tutorial-exercise-design_settings-output` <- renderUI({
  `tutorial-exercise-design_settings-result`()
})
</script>
 
<script type="application/shiny-prerendered" data-context="server">
`tutorial-exercise-design_analysis1-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-design_analysis1-code-editor`)), session)
output$`tutorial-exercise-design_analysis1-output` <- renderUI({
  `tutorial-exercise-design_analysis1-result`()
})
</script>
 <!--html_preserve-->
<script type="application/shiny-prerendered" data-context="dependencies">
{"type":"list","attributes":{},"value":[{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["jquery"]},{"type":"character","attributes":{},"value":["1.11.3"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["rmd/h/jquery-1.11.3"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["jquery.min.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["rmarkdown"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["bootstrap"]},{"type":"character","attributes":{},"value":["3.3.5"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["rmd/h/bootstrap-3.3.5"]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["viewport"]}},"value":[{"type":"character","attributes":{},"value":["width=device-width, initial-scale=1"]}]},{"type":"character","attributes":{},"value":["js/bootstrap.min.js","shim/html5shiv.min.js","shim/respond.min.js"]},{"type":"character","attributes":{},"value":["css/cerulean.min.css"]},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["rmarkdown"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["pagedtable"]},{"type":"character","attributes":{},"value":["1.1"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["rmd/h/pagedtable-1.1"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["js/pagedtable.js"]},{"type":"character","attributes":{},"value":["css/pagedtable.css"]},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["rmarkdown"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["highlightjs"]},{"type":"character","attributes":{},"value":["1.1"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["rmd/h/highlightjs-1.1"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["highlight.js"]},{"type":"character","attributes":{},"value":["textmate.css"]},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["rmarkdown"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["tutorial"]},{"type":"character","attributes":{},"value":["0.9"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/tutorial"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["tutorial.js"]},{"type":"character","attributes":{},"value":["tutorial.css"]},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["tutorial-autocompletion"]},{"type":"character","attributes":{},"value":["0.9"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/tutorial"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["tutorial-autocompletion.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["tutorial-diagnostics"]},{"type":"character","attributes":{},"value":["0.9"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/tutorial"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["tutorial-diagnostics.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["tutorial-format"]},{"type":"character","attributes":{},"value":["0.9"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["rmarkdown/templates/tutorial/resources"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["tutorial-format.js"]},{"type":"character","attributes":{},"value":["tutorial-format.css","rstudio-theme.css"]},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["jquery"]},{"type":"character","attributes":{},"value":["1.11.3"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["rmd/h/jquery-1.11.3"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["jquery.min.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["rmarkdown"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["font-awesome"]},{"type":"character","attributes":{},"value":["4.5.0"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["rmd/h/font-awesome-4.5.0"]}]},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["css/font-awesome.min.css"]},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["rmarkdown"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["bootbox"]},{"type":"character","attributes":{},"value":["4.4.0"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/bootbox"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["bootbox.min.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["localforage"]},{"type":"character","attributes":{},"value":["1.5"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/localforage"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["localforage.min.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["tutorial"]},{"type":"character","attributes":{},"value":["0.9"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/tutorial"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["tutorial.js"]},{"type":"character","attributes":{},"value":["tutorial.css"]},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["tutorial-autocompletion"]},{"type":"character","attributes":{},"value":["0.9"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/tutorial"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["tutorial-autocompletion.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["tutorial-diagnostics"]},{"type":"character","attributes":{},"value":["0.9"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/tutorial"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["tutorial-diagnostics.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["ace"]},{"type":"character","attributes":{},"value":["1.2.6"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/ace"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["ace.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["clipboardjs"]},{"type":"character","attributes":{},"value":["1.5.15"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/clipboardjs"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["clipboard.min.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["ace"]},{"type":"character","attributes":{},"value":["1.2.6"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/ace"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["ace.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["clipboardjs"]},{"type":"character","attributes":{},"value":["1.5.15"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/clipboardjs"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["clipboard.min.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["ace"]},{"type":"character","attributes":{},"value":["1.2.6"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/ace"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["ace.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["clipboardjs"]},{"type":"character","attributes":{},"value":["1.5.15"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/clipboardjs"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["clipboard.min.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["ace"]},{"type":"character","attributes":{},"value":["1.2.6"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/ace"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["ace.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["clipboardjs"]},{"type":"character","attributes":{},"value":["1.5.15"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/clipboardjs"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["clipboard.min.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["ace"]},{"type":"character","attributes":{},"value":["1.2.6"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/ace"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["ace.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["clipboardjs"]},{"type":"character","attributes":{},"value":["1.5.15"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/clipboardjs"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["clipboard.min.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["ace"]},{"type":"character","attributes":{},"value":["1.2.6"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/ace"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["ace.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["clipboardjs"]},{"type":"character","attributes":{},"value":["1.5.15"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/clipboardjs"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["clipboard.min.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["ace"]},{"type":"character","attributes":{},"value":["1.2.6"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/ace"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["ace.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["clipboardjs"]},{"type":"character","attributes":{},"value":["1.5.15"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/clipboardjs"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["clipboard.min.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["ace"]},{"type":"character","attributes":{},"value":["1.2.6"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/ace"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["ace.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["clipboardjs"]},{"type":"character","attributes":{},"value":["1.5.15"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/clipboardjs"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["clipboard.min.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["ace"]},{"type":"character","attributes":{},"value":["1.2.6"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/ace"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["ace.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["clipboardjs"]},{"type":"character","attributes":{},"value":["1.5.15"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/clipboardjs"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["clipboard.min.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["ace"]},{"type":"character","attributes":{},"value":["1.2.6"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/ace"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["ace.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["clipboardjs"]},{"type":"character","attributes":{},"value":["1.5.15"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/clipboardjs"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["clipboard.min.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["ace"]},{"type":"character","attributes":{},"value":["1.2.6"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/ace"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["ace.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["clipboardjs"]},{"type":"character","attributes":{},"value":["1.5.15"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/clipboardjs"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["clipboard.min.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["ace"]},{"type":"character","attributes":{},"value":["1.2.6"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/ace"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["ace.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["clipboardjs"]},{"type":"character","attributes":{},"value":["1.5.15"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/clipboardjs"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["clipboard.min.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["ace"]},{"type":"character","attributes":{},"value":["1.2.6"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/ace"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["ace.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["clipboardjs"]},{"type":"character","attributes":{},"value":["1.5.15"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/clipboardjs"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["clipboard.min.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["ace"]},{"type":"character","attributes":{},"value":["1.2.6"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/ace"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["ace.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["clipboardjs"]},{"type":"character","attributes":{},"value":["1.5.15"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/clipboardjs"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["clipboard.min.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["ace"]},{"type":"character","attributes":{},"value":["1.2.6"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/ace"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["ace.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["clipboardjs"]},{"type":"character","attributes":{},"value":["1.5.15"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/clipboardjs"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["clipboard.min.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["ace"]},{"type":"character","attributes":{},"value":["1.2.6"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/ace"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["ace.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["clipboardjs"]},{"type":"character","attributes":{},"value":["1.5.15"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/clipboardjs"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["clipboard.min.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["ace"]},{"type":"character","attributes":{},"value":["1.2.6"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/ace"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["ace.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["clipboardjs"]},{"type":"character","attributes":{},"value":["1.5.15"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/clipboardjs"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["clipboard.min.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["ace"]},{"type":"character","attributes":{},"value":["1.2.6"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/ace"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["ace.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["clipboardjs"]},{"type":"character","attributes":{},"value":["1.5.15"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/clipboardjs"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["clipboard.min.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["ace"]},{"type":"character","attributes":{},"value":["1.2.6"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/ace"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["ace.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["clipboardjs"]},{"type":"character","attributes":{},"value":["1.5.15"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/clipboardjs"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["clipboard.min.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["ace"]},{"type":"character","attributes":{},"value":["1.2.6"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/ace"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["ace.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["clipboardjs"]},{"type":"character","attributes":{},"value":["1.5.15"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/clipboardjs"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["clipboard.min.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["ace"]},{"type":"character","attributes":{},"value":["1.2.6"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/ace"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["ace.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["clipboardjs"]},{"type":"character","attributes":{},"value":["1.5.15"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/clipboardjs"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["clipboard.min.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["ace"]},{"type":"character","attributes":{},"value":["1.2.6"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/ace"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["ace.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["clipboardjs"]},{"type":"character","attributes":{},"value":["1.5.15"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/clipboardjs"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["clipboard.min.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["ace"]},{"type":"character","attributes":{},"value":["1.2.6"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/ace"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["ace.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["clipboardjs"]},{"type":"character","attributes":{},"value":["1.5.15"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/clipboardjs"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["clipboard.min.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["ace"]},{"type":"character","attributes":{},"value":["1.2.6"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/ace"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["ace.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["clipboardjs"]},{"type":"character","attributes":{},"value":["1.5.15"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/clipboardjs"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["clipboard.min.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["ace"]},{"type":"character","attributes":{},"value":["1.2.6"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/ace"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["ace.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["clipboardjs"]},{"type":"character","attributes":{},"value":["1.5.15"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/clipboardjs"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["clipboard.min.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["ace"]},{"type":"character","attributes":{},"value":["1.2.6"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/ace"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["ace.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["clipboardjs"]},{"type":"character","attributes":{},"value":["1.5.15"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/clipboardjs"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["clipboard.min.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["ace"]},{"type":"character","attributes":{},"value":["1.2.6"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/ace"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["ace.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["clipboardjs"]},{"type":"character","attributes":{},"value":["1.5.15"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/clipboardjs"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["clipboard.min.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["ace"]},{"type":"character","attributes":{},"value":["1.2.6"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/ace"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["ace.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["clipboardjs"]},{"type":"character","attributes":{},"value":["1.5.15"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/clipboardjs"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["clipboard.min.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["ace"]},{"type":"character","attributes":{},"value":["1.2.6"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/ace"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["ace.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["clipboardjs"]},{"type":"character","attributes":{},"value":["1.5.15"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/clipboardjs"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["clipboard.min.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["ace"]},{"type":"character","attributes":{},"value":["1.2.6"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/ace"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["ace.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["clipboardjs"]},{"type":"character","attributes":{},"value":["1.5.15"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/clipboardjs"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["clipboard.min.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["ace"]},{"type":"character","attributes":{},"value":["1.2.6"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/ace"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["ace.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["clipboardjs"]},{"type":"character","attributes":{},"value":["1.5.15"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/clipboardjs"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["clipboard.min.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["ace"]},{"type":"character","attributes":{},"value":["1.2.6"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/ace"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["ace.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["clipboardjs"]},{"type":"character","attributes":{},"value":["1.5.15"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/clipboardjs"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["clipboard.min.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["ace"]},{"type":"character","attributes":{},"value":["1.2.6"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/ace"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["ace.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["clipboardjs"]},{"type":"character","attributes":{},"value":["1.5.15"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/clipboardjs"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["clipboard.min.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["ace"]},{"type":"character","attributes":{},"value":["1.2.6"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/ace"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["ace.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["clipboardjs"]},{"type":"character","attributes":{},"value":["1.5.15"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/clipboardjs"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["clipboard.min.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["ace"]},{"type":"character","attributes":{},"value":["1.2.6"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/ace"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["ace.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["clipboardjs"]},{"type":"character","attributes":{},"value":["1.5.15"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/clipboardjs"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["clipboard.min.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["ace"]},{"type":"character","attributes":{},"value":["1.2.6"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/ace"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["ace.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["clipboardjs"]},{"type":"character","attributes":{},"value":["1.5.15"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/clipboardjs"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["clipboard.min.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["ace"]},{"type":"character","attributes":{},"value":["1.2.6"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/ace"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["ace.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["clipboardjs"]},{"type":"character","attributes":{},"value":["1.5.15"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/clipboardjs"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["clipboard.min.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["ace"]},{"type":"character","attributes":{},"value":["1.2.6"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/ace"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["ace.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["clipboardjs"]},{"type":"character","attributes":{},"value":["1.5.15"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/clipboardjs"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["clipboard.min.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["ace"]},{"type":"character","attributes":{},"value":["1.2.6"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/ace"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["ace.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["clipboardjs"]},{"type":"character","attributes":{},"value":["1.5.15"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/clipboardjs"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["clipboard.min.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["ace"]},{"type":"character","attributes":{},"value":["1.2.6"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/ace"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["ace.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["clipboardjs"]},{"type":"character","attributes":{},"value":["1.5.15"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/clipboardjs"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["clipboard.min.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["ace"]},{"type":"character","attributes":{},"value":["1.2.6"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/ace"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["ace.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["clipboardjs"]},{"type":"character","attributes":{},"value":["1.5.15"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/clipboardjs"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["clipboard.min.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["ace"]},{"type":"character","attributes":{},"value":["1.2.6"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/ace"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["ace.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["name","version","src","meta","script","stylesheet","head","attachment","package","all_files"]},"class":{"type":"character","attributes":{},"value":["html_dependency"]}},"value":[{"type":"character","attributes":{},"value":["clipboardjs"]},{"type":"character","attributes":{},"value":["1.5.15"]},{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["file"]}},"value":[{"type":"character","attributes":{},"value":["lib/clipboardjs"]}]},{"type":"NULL"},{"type":"character","attributes":{},"value":["clipboard.min.js"]},{"type":"NULL"},{"type":"NULL"},{"type":"NULL"},{"type":"character","attributes":{},"value":["learnr"]},{"type":"logical","attributes":{},"value":[true]}]}]}
</script>
<!--/html_preserve-->
</div>
</div>

</div> <!-- topics -->

<div class="topicsContainer">
<div class="topicsPositioner">
<div class="band">
<div class="bandContent topicsListContainer">

<!-- begin doc-metadata -->
<div id="doc-metadata">
<h2 class="title toc-ignore" style="display:none;">openPrimeR Tutorial</h2>
</div>
<!-- end doc-metadata -->

</div> <!-- bandContent.topicsListContainer -->
</div> <!-- band -->
</div> <!-- topicsPositioner -->
</div> <!-- topicsContainer -->


</div> <!-- bandContent page -->
</div> <!-- pageContent band -->




<script>
// add bootstrap table styles to pandoc tables
function bootstrapStylePandocTables() {
  $('tr.header').parent('thead').parent('table').addClass('table table-condensed');
}
$(document).ready(function () {
  bootstrapStylePandocTables();
});
</script>


<!-- dynamically load mathjax for compatibility with self-contained -->
<script>
  (function () {
    var script = document.createElement("script");
    script.type = "text/javascript";
    script.src  = "https://mathjax.rstudio.com/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML";
    document.getElementsByTagName("head")[0].appendChild(script);
  })();
</script>

</body>

</html>
