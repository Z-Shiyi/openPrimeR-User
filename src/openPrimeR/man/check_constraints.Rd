% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/constraints_eval.R
\name{check_constraints}
\alias{check_constraints}
\title{Evaluation of Primer Constraints.}
\usage{
check_constraints(primer.df, template.df, settings,
  active.constraints = names(constraints(settings)),
  to.compute.constraints = active.constraints, for.shiny = FALSE,
  updateProgress = NULL)
}
\arguments{
\item{primer.df}{A \code{Primers} object containing the primers
whose properties are to be checked.}

\item{template.df}{A \code{Templates} object containing the 
template sequences corresponding to \code{primer.df}.}

\item{settings}{A \code{DesignSettings} object containing the 
constraints that are to be evaluated.}

\item{active.constraints}{A subset of the constraint identifiers 
provided by \code{settings} that are to be checked
for fulfillment. By default \code{active.constraints} is \code{NULL} such that
all constraints found in \code{settings} are evaluated. Otherwise,
only the constraints specified via \code{active.constraints} 
that are available in \code{settings} are considered.}

\item{to.compute.constraints}{Constraints that are to be computed.
By default, \code{to.compute.constraints} is set to \code{NULL} such that
all \code{active.constraints} are computed. If \code{to.compute.constraints}
is a subset of \code{active.constraints}, all constraints specified
via \code{active.constraints} are evaluated for fulfillment,
but only the constraints in \code{to.compute.constraints} are newly calculated.}

\item{for.shiny}{Whether the output of the function shall be
formatted as HTML. The default setting is \code{FALSE}.}

\item{updateProgress}{Progress callback function for shiny. The defaut is
\code{NULL} meaning that no progress is monitored via the Shiny interface.}
}
\value{
A \code{Primers} object that is augmented
with columns indicating the results for each evaluated constraint.
The \code{constraints_passed} column indicates whether all \code{active.constraints} were fulfilled.
The \code{EVAL_*} columns indicate the fulfillment of primer-specific constraints.
The \code{T_EVAL_*} columns indicate the fulfillment of template-specific
(e.g. coverage-based) constraints.
For the coverage computations, columns prefixed by \code{Basic_},
indicate the results from string matching, while all other results
(e.g. \code{primer_coverage}) indicate the expected coverage
after applying the coverage constraints specified in \code{settings}.
Columns prefixed by \code{Off_} indicate off-target binding results.
}
\description{
Determines whether a set of primers
fulfills the constraints on the properties of the primers.
}
\details{
When the optional argument
\code{active.constraints} is supplied, only a subset of the constraints
provided in \code{settings} is evaluated. Only constraints that
are defined in \code{settings} can be computed. For a detailed
description of all possible constraints and their options, please
consider the \code{\link{ConstraintSettings}} documentation.
}
\note{
Please note that some constraints can only be computed if additional software is installed,
please see the documentation of
\code{\link{DesignSettings}} for an overview.
}
\examples{
data(Ippolito)
settings.xml <- system.file("extdata", "settings", 
                 "C_Taq_PCR_high_stringency.xml", package = "openPrimeR")
settings <- read_settings(settings.xml)
# Check all constraints found in 'settings':
constraint.df <- check_constraints(primer.df, template.df, 
                     settings, active.constraints = names(constraints(settings)))
# Summarize the evaluation results
summary(constraint.df)
}
\seealso{
Other primer functions: \code{\link{Primers-class}},
  \code{\link{check_restriction_sites}},
  \code{\link{create_report}},
  \code{\link{design_primers}},
  \code{\link{filter_primers}},
  \code{\link{get_initial_primers}},
  \code{\link{primer_significance}},
  \code{\link{score_degen}}, \code{\link{write_primers}}
}
\keyword{Primers}
